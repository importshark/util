/**The internal java and version manifest handler for GMLL */
import { File } from "./objects/files.js";
import Instance from "./objects/instance.js";
import type { VersionManifest, MCRuntimeVal } from "../types";
/**
 * Compiles all manifest objects GMLL knows about into a giant array. This will include almost all fabric versions and any installed version of forge.
 * GMLL can still launch a version if it is not within this folder, although it is not recommended
 * @returns a list of Manifest files GMLL knows definitely exist.
 */
export declare function getManifests(): VersionManifest[];
/**Gets a specific version manifest based on the version ID provided
 * @param version the version ID
 * @returns a version manifest. It will be of type "unknown" if the specific manifest is not in the manifest database.
 */
export declare function getManifest(version: string): VersionManifest;
/**Gets the latest release and snapshot builds.*/
export declare function getLatest(): {
    "release": string;
    "snapshot": string;
};
export declare function installForge(forgeInstallerJar?: string | File, forgiacArgs?: string[]): Promise<VersionManifest>;
/**
 * Imports a modpack off the internet compatible with GMLL via a link.
 * See the {@link Instance.wrap()  wrapper function} to generate the files to upload to your web server to make this work
 * @param url the aforementioned link.
 */
export declare function importLink(url: string): Promise<VersionManifest>;
export declare function importLink(url: string, name: string): Promise<Instance>;
/**
 * Gets the path to an installed version of Java. GMLL manages these versions and they're not provided by the system.
 * @param java the name of the Java runtime. Based on the names Mojang gave them.
 * @returns The location of the have executable.
 */
export declare function getJavaPath(java?: MCRuntimeVal): File;
