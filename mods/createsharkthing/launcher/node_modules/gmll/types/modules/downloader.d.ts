import { Dir, File } from "./objects/files.js";
import type { DownloadableFile, RuntimeManifest, MCRuntimeVal, VersionJson, Artifact, MojangResourceManifest } from "../types";
/**
 * Download function. Can be used for downloading modpacks and launcher updates.
 * Checks sha1 hashes and can use multiple cores to download files rapidly.
 * Untested on Intel's new CPUs, use at own risk and report to me if it breaks. -Hanro50
 *
 * @param obj The objects that will be downloaded
 */
export declare function download(obj: Partial<DownloadableFile>[]): Promise<void>;
/**
 * Installs a set version of Java locally.
 * @param runtime the name of the Java runtime. Based on the names Mojang gave them.
 * @returns This is an async function!
 */
export declare function runtime(runtime: MCRuntimeVal): Promise<void>;
/**
 * Did you know you can use this file to download dungeons?
 * (We prefer not to be sued...so no more details then that)
 */
export declare function mojangRFDownloader(file: MojangResourceManifest, baseFile: Dir, lzma?: Dir): Promise<void>;
export declare const assetURL = "https://resources.download.minecraft.net/";
/**Install a set version's assets based on a provided asset index. */
export declare function assets(index: Artifact): Promise<void>;
/**Installs the lib files from a set version */
export declare function libraries(version: VersionJson): Promise<void>;
export declare function getRuntimeIndexes(manifest: RuntimeManifest): Promise<void>;
export declare function getForgiac(): Promise<File>;
/**
 * Updates GMLL's manifest files. Used internally
 */
export declare function manifests(): Promise<void>;
export declare function getAgentFile(): File;
/**
 * Used for runtime management
  */
export declare function encodeMRF(url: string, root: Dir, out: Dir): Promise<MojangResourceManifest>;
