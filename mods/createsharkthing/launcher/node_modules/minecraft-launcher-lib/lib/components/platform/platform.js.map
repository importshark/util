{"version":3,"sources":["../../../src/components/platform/platform.ts"],"names":["OS","Platform","from","child","parent","Object","assign","current","version","name","arch","friendlifyNodePlatform","nodePlatform","WINDOWS","OSX","LINUX","_current","constructor","os","platform","release","classpathSeparator"],"mappings":";;;;;;;AAgBA;;;;;;AAfA;AACA;AACA;IACYA,E;;;WAAAA,E;AAAAA,EAAAA,E;AAAAA,EAAAA,E;AAAAA,EAAAA,E;GAAAA,E,kBAAAA,E;;AAcL,MAAMC,QAAN,CAAoC;AAE5B,SAAJC,IAAI,CAACC,KAAD,EAA4BC,MAA5B,EAAmE;AAC1E,QAAI,CAACA,MAAL,EAAa;AACT,UAAID,KAAK,YAAYF,QAArB,EAA+B,OAAOE,KAAP,CAA/B,KACK;AACDC,QAAAA,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,QAAQ,CAACM,OAA3B,CAAT;AACH;AACJ;;AAED,UAAM;AACFC,MAAAA,OAAO,GAAGJ,MAAM,CAACI,OADf;AAEFC,MAAAA,IAAI,GAAGL,MAAM,CAACK,IAFZ;AAGFC,MAAAA,IAAI,GAAGN,MAAM,CAACM;AAHZ,QAIFP,KAJJ;AAMA,WAAO,IAAIF,QAAJ,CACHQ,IADG,EAEHC,IAFG,EAGHF,OAHG,CAAP;AAKH;AAED;AACJ;AACA;AACA;;;AACiC,SAAtBG,sBAAsB,CAACC,YAAD,EAAoC;AAC7D,YAAQA,YAAR;AACI,WAAK,OAAL;AAAc,eAAOZ,EAAE,CAACa,OAAV;;AACd,WAAK,QAAL;AAAe;AACX,iBAAOb,EAAE,CAACc,GAAV;AACH;;AACD;AAAS,eAAOd,EAAE,CAACe,KAAV;AALb;AAOH;AAED;AACJ;AACA;;;AACsB,aAAPR,OAAO,GAAuB;AACrC,WAAON,QAAQ,CAACe,QAAT,GAAoBf,QAAQ,CAACe,QAA7B,GAAwCf,QAAQ,CAACe,QAAT,GAAoB,IAAIf,QAAJ,EAAnE;AACH;;AAIDgB,EAAAA,WAAW,CACAR,IAAQ,GAAGR,QAAQ,CAACU,sBAAT,CAAgCO,EAAE,CAACC,QAAH,EAAhC,CADX,EAEAT,IAAY,GAAGQ,EAAE,CAACR,IAAH,EAFf,EAGAF,OAAe,GAAGU,EAAE,CAACE,OAAH,EAHlB,EAIT;AAAA,SAHSX,IAGT,GAHSA,IAGT;AAAA,SAFSC,IAET,GAFSA,IAET;AAAA,SADSF,OACT,GADSA,OACT;AAAG;AAEL;AACJ;AACA;;;AAC0B,MAAlBa,kBAAkB,GAAW;AAC7B,WAAQ,KAAKZ,IAAL,KAAcT,EAAE,CAACa,OAAlB,GAA6B,GAA7B,GAAmC,GAA1C;AACH;;AAzDsC","sourcesContent":["\n/**\n * Mojang friendly platform name.\n */\nexport enum OS {\n    WINDOWS = 'windows',\n    LINUX = 'linux',\n    OSX = 'osx',\n}\n\nexport interface IPlatform {\n    arch: string;\n    name: OS;\n    version: string;\n}\n\nimport * as os from 'os';\n\nexport class Platform implements IPlatform {\n\n    static from(child: Partial<IPlatform>, parent?: Partial<IPlatform>): Platform {\n        if (!parent) {\n            if (child instanceof Platform) return child;\n            else {\n                parent = Object.assign({}, Platform.current);\n            }\n        }\n\n        const {\n            version = parent.version,\n            name = parent.name,\n            arch = parent.arch,\n        } = child;\n\n        return new Platform(\n            name,\n            arch,\n            version,\n        );\n    }\n\n    /**\n     * Transforms node platform name to a Mojang-friendly platform name.\n     * @param nodePlatform The node platform name. E.g. `win32`.\n     */\n    static friendlifyNodePlatform(nodePlatform: NodeJS.Platform): OS {\n        switch (nodePlatform) {\n            case 'win32': return OS.WINDOWS;\n            case 'darwin': {\n                return OS.OSX;\n            }\n            default: return OS.LINUX;\n        }\n    }\n\n    /**\n     * The current platform.\n     */\n    static get current(): Readonly<Platform> {\n        return Platform._current ? Platform._current : Platform._current = new Platform();\n    }\n\n    private static _current: Platform;\n\n    constructor(\n        public name: OS = Platform.friendlifyNodePlatform(os.platform()),\n        public arch: string = os.arch(),\n        public version: string = os.release(),\n    ) { }\n\n    /**\n     * The classpath sep for this platform.\n     */\n    get classpathSeparator(): string {\n        return (this.name !== OS.WINDOWS) ? ':' : ';';\n    }\n\n}\n"],"file":"platform.js"}