"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Platform = exports.OS = void 0;

var os = _interopRequireWildcard(require("os"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Mojang friendly platform name.
 */
let OS;
exports.OS = OS;

(function (OS) {
  OS["WINDOWS"] = "windows";
  OS["LINUX"] = "linux";
  OS["OSX"] = "osx";
})(OS || (exports.OS = OS = {}));

class Platform {
  static from(child, parent) {
    if (!parent) {
      if (child instanceof Platform) return child;else {
        parent = Object.assign({}, Platform.current);
      }
    }

    const {
      version = parent.version,
      name = parent.name,
      arch = parent.arch
    } = child;
    return new Platform(name, arch, version);
  }
  /**
   * Transforms node platform name to a Mojang-friendly platform name.
   * @param nodePlatform The node platform name. E.g. `win32`.
   */


  static friendlifyNodePlatform(nodePlatform) {
    switch (nodePlatform) {
      case 'win32':
        return OS.WINDOWS;

      case 'darwin':
        {
          return OS.OSX;
        }

      default:
        return OS.LINUX;
    }
  }
  /**
   * The current platform.
   */


  static get current() {
    return Platform._current ? Platform._current : Platform._current = new Platform();
  }

  constructor(name = Platform.friendlifyNodePlatform(os.platform()), arch = os.arch(), version = os.release()) {
    this.name = name;
    this.arch = arch;
    this.version = version;
  }
  /**
   * The classpath sep for this platform.
   */


  get classpathSeparator() {
    return this.name !== OS.WINDOWS ? ':' : ';';
  }

}

exports.Platform = Platform;
//# sourceMappingURL=platform.js.map