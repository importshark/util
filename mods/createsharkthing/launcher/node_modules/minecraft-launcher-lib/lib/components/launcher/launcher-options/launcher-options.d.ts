import { LauncherFolder, LauncherLocation } from '../launcher-folder';
import { MVersion, IMVersion } from '../../m-version';
import { MVersionArguments, IMVersionArguments } from '../../m-version/m-version-arguments';
import { Platform, IPlatform } from '../../platform';
import { ILauncherFeatures } from '../launcher-features';
import { IAuth } from '../../authenticator';
export interface ILauncherOptions {
    auth?: IAuth;
    folder: LauncherLocation;
    minecraftVersion: Partial<IMVersion>;
    /**
     * The platform of this launch will run.
     * By default, it will fetch the current machine info if this is absent.
     */
    platform?: Partial<IPlatform>;
    features?: ILauncherFeatures;
    /**
     * The extra minecraft version arguments.
     *
     * If you use this, you can override some of the `MCLL` functions.
     *
     * *USE VERY CAREFULLY!*
     */
    extraArgs?: Partial<IMVersionArguments>;
    /**
     * The extra argument fields.
     * This allows you to override values of argument fields.
     *
     * If you use this, you can override some of the `MCLL` functions.
     *
     * *USE VERY CAREFULLY!*
     */
    overrides?: Record<string, string>;
}
export declare class LauncherOptions implements ILauncherOptions {
    auth: IAuth;
    features: ILauncherFeatures;
    overrides: Record<string, string>;
    static from(launcherOptions: ILauncherOptions): LauncherOptions;
    folder: LauncherFolder;
    minecraftVersion: MVersion;
    platform: Platform;
    extraArgs: MVersionArguments;
    constructor(auth: IAuth, location: LauncherLocation, minecraftVersion: Partial<IMVersion>, platfrom: Partial<IPlatform>, features?: ILauncherFeatures, extraArgs?: Partial<IMVersionArguments>, overrides?: Record<string, string>);
    /**
     * This returns field or throws `field not found` error.
     */
    getField(field: string): [string, string];
    getFeatureField(feature: string, field: string, defaultValue: string): [string, string];
}
