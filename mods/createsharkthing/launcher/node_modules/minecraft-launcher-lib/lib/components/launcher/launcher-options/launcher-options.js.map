{"version":3,"sources":["../../../../src/components/launcher/launcher-options/launcher-options.ts"],"names":["LauncherOptions","from","launcherOptions","auth","folder","minecraftVersion","platform","features","extraArgs","overrides","constructor","OfflineAuthenticator","generateToken","substring","getAuth","location","platfrom","game","Argument","value","rules","action","RuleAction","ALLOW","has_fullscreen","has_autoconnect","jvm","has_custom_memory","ignore_patch_discrepancies","ignore_invalid_minecraft_certificates","LauncherFolder","MVersion","Platform","MVersionArguments","getField","field","accessToken","user","uuid","name","type","JSON","stringify","properties","assets","id","getNativesPath","Error","getFeatureField","feature","defaultValue","Object","prototype","hasOwnProperty","call","String"],"mappings":"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","sourcesContent":["\nimport { LauncherFolder, LauncherLocation } from '../launcher-folder';\nimport { MVersion, IMVersion } from '../../m-version';\nimport { MVersionArguments, IMVersionArguments } from '../../m-version/m-version-arguments';\nimport { Argument } from '../../argument';\nimport { Platform, IPlatform } from '../../platform';\nimport { ILauncherFeatures } from '../launcher-features';\nimport { RuleAction } from '../../rule';\nimport { OfflineAuthenticator, IAuth } from '../../authenticator';\nimport { join } from 'path';\n\nexport interface ILauncherOptions {\n\n    auth?: IAuth;\n\n    folder: LauncherLocation;\n\n    minecraftVersion: Partial<IMVersion>;\n\n    /**\n     * The platform of this launch will run.\n     * By default, it will fetch the current machine info if this is absent.\n     */\n    platform?: Partial<IPlatform>;\n\n    features?: ILauncherFeatures;\n\n    /**\n     * The extra minecraft version arguments.\n     *\n     * If you use this, you can override some of the `MCLL` functions.\n     *\n     * *USE VERY CAREFULLY!*\n     */\n    extraArgs?: Partial<IMVersionArguments>;\n\n    /**\n     * The extra argument fields.\n     * This allows you to override values of argument fields.\n     *\n     * If you use this, you can override some of the `MCLL` functions.\n     *\n     * *USE VERY CAREFULLY!*\n     */\n    overrides?: Record<string, string>;\n\n}\n\nexport class LauncherOptions implements ILauncherOptions {\n\n    static from(launcherOptions: ILauncherOptions): LauncherOptions {\n        if (launcherOptions instanceof LauncherOptions) return launcherOptions;\n\n        const {\n            auth,\n            folder,\n            minecraftVersion,\n            platform = {},\n            features = {},\n            extraArgs,\n            overrides,\n        } = launcherOptions;\n\n        return new LauncherOptions(\n            auth,\n            folder,\n            minecraftVersion,\n            platform,\n            features,\n            extraArgs,\n            overrides,\n        );\n    }\n\n    folder: LauncherFolder;\n\n    minecraftVersion: MVersion;\n\n    platform: Platform;\n\n    extraArgs: MVersionArguments;\n\n    constructor(\n        public auth: IAuth = new OfflineAuthenticator('MCLL_' + OfflineAuthenticator.generateToken(false).substring(0, 4)).getAuth(),\n\n        location: LauncherLocation,\n\n        minecraftVersion: Partial<IMVersion>,\n\n        platfrom: Partial<IPlatform>,\n\n        public features: ILauncherFeatures = {},\n\n        extraArgs: Partial<IMVersionArguments> = {\n            game: [\n                Argument.from({\n                    value: '--fullscreen',\n                    rules: [\n                        { action: RuleAction.ALLOW, features: { has_fullscreen: true } },\n                    ],\n                }),\n                Argument.from({\n                    value: ['--server ${server_host}', '--port ${server_port}'],\n                    rules: [\n                        { action: RuleAction.ALLOW, features: { has_autoconnect: true } },\n                    ],\n                }),\n            ],\n            jvm: [\n                Argument.from({\n                    value: ['-Xmx${memory_max}', '-Xms${memory_min}'],\n                    rules: [\n                        { action: RuleAction.ALLOW, features: { has_custom_memory: true } },\n                    ],\n                }),\n                Argument.from({\n                    value: '-Dfml.ignorePatchDiscrepancies=${ignorePatchDiscrepancies}',\n                    rules: [\n                        { action: RuleAction.ALLOW, features: { ignore_patch_discrepancies: true } },\n                    ],\n                }),\n                Argument.from({\n                    value: '-Dfml.ignoreInvalidMinecraftCertificates=${ignoreInvalidMinecraftCertificates}',\n                    rules: [\n                        { action: RuleAction.ALLOW, features: { ignore_invalid_minecraft_certificates: true } },\n                    ],\n                }),\n            ],\n        },\n\n        public overrides: Record<string, string> = {},\n    ) {\n        this.folder = LauncherFolder.from(location);\n\n        this.minecraftVersion = MVersion.from(minecraftVersion);\n\n        this.platform = Platform.from(platfrom);\n\n        this.extraArgs = MVersionArguments.from(extraArgs);\n    }\n\n    /**\n     * This returns field or throws `field not found` error.\n     */\n    getField(field: string): [string, string] {\n        switch (field) {\n            case 'auth_access_token':\n            case 'auth_session': return [field, this.auth.accessToken];\n            case 'auth_uuid': return [field, this.auth.user.uuid];\n            case 'auth_player_name': return [field, this.auth.user.name];\n\n            case 'user_type': return [field, this.auth.user.type];\n            case 'user_properties': return [field, JSON.stringify(this.auth.user.properties)];\n\n            case 'assets_root': return [field, this.folder.assets];\n            case 'game_assets': {\n                return [\n                    field,\n                    this.minecraftVersion.assets !== 'legacy' ? join(this.folder.game, 'resources') : join(this.folder.assets, 'virtual', 'legacy'),\n                ];\n            }\n\n            case 'assets_index_name': return [field, this.minecraftVersion.assets];\n\n            case 'version_name': return [field, this.minecraftVersion.id];\n            case 'version_type': return [field, this.minecraftVersion.type];\n\n            case 'natives_directory': return [field, this.folder.getNativesPath(this.minecraftVersion.id)];\n\n            case 'game_directory': return [field, this.folder.game];\n\n            default: throw new Error('field not found');\n        }\n    }\n\n    getFeatureField(feature: string, field: string, defaultValue: string): [string, string] {\n        switch (typeof this.features[feature]) {\n            case 'object': {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                if (Object.prototype.hasOwnProperty.call(this.features[feature], field)) return [field, String((<any>this.features)[feature]?.[field])];\n            }\n            default: return [field, defaultValue];\n        }\n    }\n\n}\n"],"file":"launcher-options.js"}