"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LauncherOptions = void 0;

var _launcherFolder = require("../launcher-folder");

var _mVersion = require("../../m-version");

var _mVersionArguments = require("../../m-version/m-version-arguments");

var _argument = require("../../argument");

var _platform = require("../../platform");

var _rule = require("../../rule");

var _authenticator = require("../../authenticator");

var _path = require("path");

class LauncherOptions {
  static from(launcherOptions) {
    if (launcherOptions instanceof LauncherOptions) return launcherOptions;
    const {
      auth,
      folder,
      minecraftVersion,
      platform = {},
      features = {},
      extraArgs,
      overrides
    } = launcherOptions;
    return new LauncherOptions(auth, folder, minecraftVersion, platform, features, extraArgs, overrides);
  }

  constructor(auth = new _authenticator.OfflineAuthenticator('MCLL_' + _authenticator.OfflineAuthenticator.generateToken(false).substring(0, 4)).getAuth(), location, minecraftVersion, platfrom, features = {}, extraArgs = {
    game: [_argument.Argument.from({
      value: '--fullscreen',
      rules: [{
        action: _rule.RuleAction.ALLOW,
        features: {
          has_fullscreen: true
        }
      }]
    }), _argument.Argument.from({
      value: ['--server ${server_host}', '--port ${server_port}'],
      rules: [{
        action: _rule.RuleAction.ALLOW,
        features: {
          has_autoconnect: true
        }
      }]
    })],
    jvm: [_argument.Argument.from({
      value: ['-Xmx${memory_max}', '-Xms${memory_min}'],
      rules: [{
        action: _rule.RuleAction.ALLOW,
        features: {
          has_custom_memory: true
        }
      }]
    }), _argument.Argument.from({
      value: '-Dfml.ignorePatchDiscrepancies=${ignorePatchDiscrepancies}',
      rules: [{
        action: _rule.RuleAction.ALLOW,
        features: {
          ignore_patch_discrepancies: true
        }
      }]
    }), _argument.Argument.from({
      value: '-Dfml.ignoreInvalidMinecraftCertificates=${ignoreInvalidMinecraftCertificates}',
      rules: [{
        action: _rule.RuleAction.ALLOW,
        features: {
          ignore_invalid_minecraft_certificates: true
        }
      }]
    })]
  }, overrides = {}) {
    this.auth = auth;
    this.features = features;
    this.overrides = overrides;
    this.folder = _launcherFolder.LauncherFolder.from(location);
    this.minecraftVersion = _mVersion.MVersion.from(minecraftVersion);
    this.platform = _platform.Platform.from(platfrom);
    this.extraArgs = _mVersionArguments.MVersionArguments.from(extraArgs);
  }
  /**
   * This returns field or throws `field not found` error.
   */


  getField(field) {
    switch (field) {
      case 'auth_access_token':
      case 'auth_session':
        return [field, this.auth.accessToken];

      case 'auth_uuid':
        return [field, this.auth.user.uuid];

      case 'auth_player_name':
        return [field, this.auth.user.name];

      case 'user_type':
        return [field, this.auth.user.type];

      case 'user_properties':
        return [field, JSON.stringify(this.auth.user.properties)];

      case 'assets_root':
        return [field, this.folder.assets];

      case 'game_assets':
        {
          return [field, this.minecraftVersion.assets !== 'legacy' ? (0, _path.join)(this.folder.game, 'resources') : (0, _path.join)(this.folder.assets, 'virtual', 'legacy')];
        }

      case 'assets_index_name':
        return [field, this.minecraftVersion.assets];

      case 'version_name':
        return [field, this.minecraftVersion.id];

      case 'version_type':
        return [field, this.minecraftVersion.type];

      case 'natives_directory':
        return [field, this.folder.getNativesPath(this.minecraftVersion.id)];

      case 'game_directory':
        return [field, this.folder.game];

      default:
        throw new Error('field not found');
    }
  }

  getFeatureField(feature, field, defaultValue) {
    switch (typeof this.features[feature]) {
      case 'object':
        {
          var _feature;

          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          if (Object.prototype.hasOwnProperty.call(this.features[feature], field)) return [field, String((_feature = this.features[feature]) === null || _feature === void 0 ? void 0 : _feature[field])];
        }

      default:
        return [field, defaultValue];
    }
  }

}

exports.LauncherOptions = LauncherOptions;
//# sourceMappingURL=launcher-options.js.map