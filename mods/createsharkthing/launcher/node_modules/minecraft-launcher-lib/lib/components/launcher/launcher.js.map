{"version":3,"sources":["../../../src/components/launcher/launcher.ts"],"names":["Launcher","constructor","options","opts","LauncherOptions","from","constructArguments","minecraftVersion","platform","features","extraArgs","overrides","classpath","constructClasspath","fields","Map","getField","getFeatureField","Array","join","classpathSeparator","Object","entries","formatArgs","args","filter","arg","isApplicable","map","format","flat","game","concat","jvm","mainClass","folder","Set","libs","lib","getLibraryPath","downloads","artifact","path","versions","id","launch","javaPath","spawnOptions","assign","cwd","root"],"mappings":"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","sourcesContent":["\nimport { spawn, ChildProcess, SpawnOptions } from 'child_process';\nimport { join } from 'path';\nimport { LauncherOptions, ILauncherOptions } from './launcher-options';\nimport { Argument } from '../argument';\n\nexport class Launcher {\n\n    opts: LauncherOptions;\n\n    constructor(\n        options: ILauncherOptions,\n    ) {\n        this.opts = LauncherOptions.from(options);\n    }\n\n    /**\n     * Construct arguments array for child process.\n     *\n     * This function is useful if you want to launch the process by yourself.\n     * This function will **NOT** check if the runtime libs are completed, and **WON'T** check or extract native libs.\n     */\n    constructArguments(): string[] {\n        const {\n            minecraftVersion,\n            platform,\n            features,\n            extraArgs,\n            overrides,\n        } = this.opts;\n\n        const classpath: Set<string> = this.constructClasspath();\n\n        const fields: Map<string, string> = new Map([\n            this.opts.getField('auth_access_token'),\n            this.opts.getField('auth_session'),\n            this.opts.getField('auth_player_name'),\n            this.opts.getField('auth_uuid'),\n\n            this.opts.getField('user_type'),\n            this.opts.getField('user_properties'),\n\n            this.opts.getField('assets_root'),\n\n            this.opts.getField('game_assets'),\n\n            this.opts.getField('assets_index_name'),\n\n            this.opts.getField('version_name'),\n            this.opts.getField('version_type'),\n\n            this.opts.getField('game_directory'),\n\n            this.opts.getField('natives_directory'),\n\n            ['launcher_name', 'minecraft-launcher-lib'],\n            ['launcher_version', 'release'],\n\n            this.opts.getFeatureField('has_custom_resolution', 'resolution_width', '800'),\n            this.opts.getFeatureField('has_custom_resolution', 'resolution_height', '600'),\n\n            ['classpath', Array.from(classpath).join(platform.classpathSeparator)],\n\n            this.opts.getFeatureField('has_custom_memory', 'memory_max', '1G'),\n            this.opts.getFeatureField('has_custom_memory', 'memory_min', '512M'),\n\n            this.opts.getFeatureField('ignore_patch_discrepancies', 'ignorePatchDiscrepancies', 'true'),\n            this.opts.getFeatureField('ignore_invalid_minecraft_certificates', 'ignoreInvalidMinecraftCertificates', 'true'),\n\n            this.opts.getFeatureField('has_autoconnect', 'server_host', 'localhost'),\n            this.opts.getFeatureField('has_autoconnect', 'server_port', '25565'),\n\n            ...Object.entries(overrides),\n        ]); // construct values of argument fields\n\n        const formatArgs = (args: Argument[]): string[] => args\n            .filter(arg => arg.isApplicable(platform, features))\n            .map(arg => arg.format(fields))\n            .flat();\n\n        const game = minecraftVersion.args.game.concat(extraArgs.game);\n        const jvm = minecraftVersion.args.jvm.concat(extraArgs.jvm); // final unformatted jvm arguments\n\n        return formatArgs(jvm).concat(minecraftVersion.mainClass, ...formatArgs(game));\n    }\n\n    /**\n     * Construct libs paths for `classpath` argument.\n     */\n    constructClasspath(): Set<string> {\n        const {\n            folder,\n            minecraftVersion,\n            platform,\n            features,\n        } = this.opts;\n\n        return new Set(\n            minecraftVersion.libs\n                .filter(lib => lib.isApplicable(platform, features))\n                .map(lib => {\n                    return folder.getLibraryPath(lib.downloads.artifact.path);\n                })\n                .concat(join(folder.versions, minecraftVersion.id, minecraftVersion.id + '.jar')),\n        );\n    }\n\n    /**\n     * Launch a game.\n     * This function use spawn to create child process.\n     *\n     * To use an alternative way, see function constructArguments.\n     *\n     * @param javaPath The path to java executable. By default `java`.\n     * @param spawnOptions The process spawn options.\n     */\n    launch(javaPath: string = 'java', spawnOptions: SpawnOptions = {}): ChildProcess {\n        return spawn(\n            javaPath,\n            this.constructArguments(),\n            Object.assign({ cwd: this.opts.folder.root }, spawnOptions), // final spawn options\n        );\n    }\n\n}\n"],"file":"launcher.js"}