"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LauncherFolder = void 0;

var _path = require("path");

var _folder = require("../../folder");

class LauncherFolder extends _folder.Folder {
  static from(launcherLocation) {
    if (launcherLocation instanceof LauncherFolder) return launcherLocation;else if (typeof launcherLocation !== 'string') {
      throw new Error('launcher location is not string');
    }
    return new LauncherFolder(launcherLocation);
  }

  constructor(root, overrides = {}) {
    super(root);
    this.overrides = overrides;
  }

  get game() {
    return this.overrides.game || this.root;
  }

  set game(game) {
    this.overrides.game = game;
  }
  /**
   * The assets directory,
   */


  get assets() {
    return this.overrides.assets || this.join('assets');
  }

  set assets(assets) {
    this.overrides.assets = assets;
  }
  /**
   * The native libraries directory.
   */


  get natives() {
    return this.overrides.natives || this.join('natives');
  }

  set natives(natives) {
    this.overrides.natives = natives;
  }

  get versions() {
    return this.overrides.versions || this.join('versions');
  }

  set versions(versions) {
    this.overrides.versions = versions;
  }
  /**
   * The libraries directory.
   */


  get libraries() {
    return this.overrides.libraries || this.join('libraries');
  }

  set libraries(libraries) {
    this.overrides.libraries = libraries;
  }
  /**
   * The libraries directory.
   */


  get libs() {
    return this.libraries;
  }

  set libs(libs) {
    this.libraries = libs;
  }

  getLibraryPath(libraryPath) {
    return (0, _path.join)(this.libraries, libraryPath);
  }

  getVersionPath(versionId) {
    return (0, _path.join)(this.versions, versionId);
  }

  getNativesPath(versionId) {
    return (0, _path.join)(this.natives, versionId);
  }

}

exports.LauncherFolder = LauncherFolder;
//# sourceMappingURL=launcher-folder.js.map