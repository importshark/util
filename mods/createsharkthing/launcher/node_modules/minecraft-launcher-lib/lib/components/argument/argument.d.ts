import { Rule, IRule } from '../rule';
import { IPlatform } from '../platform';
export interface IArgument {
    /**
     * An argument or a args list.
     */
    value: string | string[];
    rules: Array<Partial<IRule>>;
}
export declare class Argument implements IArgument {
    static from(child: IArgument['value'] | Partial<IArgument>, parent?: Partial<IArgument>): Argument;
    static format(template: string, fields: Map<string, string>): string;
    value: string[];
    rules: Rule[];
    constructor(value: IArgument['value'], rules?: Partial<IRule>[]);
    /**
     * Checks if this argument is applicable to the current platform and features.
     *
     * @param platform The current platform.
     * @param features The current featutes.
     *
     * @returns Is argument applicable?
     */
    isApplicable(platform: Partial<IPlatform>, features?: Record<string, unknown>): boolean;
    /**
     * Formats and returns this argument as a string.
     */
    format(fields: Map<string, string>): string[];
    toString(): string;
    toJSON(): string | IArgument;
}
