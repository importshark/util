"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Argument = void 0;

var _rule = require("../rule");

class Argument {
  static from(child, parent) {
    if (!parent) {
      if (child instanceof Argument) return child;
      parent = {};
    }

    switch (typeof child) {
      case 'string':
        break;

      case 'object':
        {
          if (Array.isArray(child)) break; // TODO child arg' rules extends parent arg rules

          const {
            value,
            rules = parent.rules
          } = child;
          if (value) return new Argument(value, rules);
        }

      default:
        throw new Error('missing argument value');
    }

    return new Argument(child, parent.rules);
  }

  static format(template, fields) {
    return template.replace(/\$\{(.*?)}/g, key => {
      var _fields$get;

      return (_fields$get = fields.get(key.substring(2).substring(0, key.length - 3))) !== null && _fields$get !== void 0 ? _fields$get : key;
    });
  } // github.com/voxelum/minecraft-launcher-core-node/blob/3d5aa7a38cbc66cdfc9b9d68a8bdf4988905cb72/packages/core/launch.ts


  constructor(value, rules = []) {
    this.value = Array.isArray(value) ? value : value.split(/\s/g);
    this.rules = rules.map(rule => _rule.Rule.from(rule));
  }
  /**
   * Checks if this argument is applicable to the current platform and features.
   *
   * @param platform The current platform.
   * @param features The current featutes.
   *
   * @returns Is argument applicable?
   */


  isApplicable(platform, features = {}) {
    return !this.rules.map(rule => rule.isAllowable(platform, features)).includes(false);
  }
  /**
   * Formats and returns this argument as a string.
   */


  format(fields) {
    return this.value.map(value => Argument.format(value, fields));
  }

  toString() {
    return this.value.join(' ');
  }

  toJSON() {
    const value = this.toString();
    const rules = this.rules;
    return rules.length ? {
      value,
      rules
    } : value;
  }

}

exports.Argument = Argument;
//# sourceMappingURL=argument.js.map