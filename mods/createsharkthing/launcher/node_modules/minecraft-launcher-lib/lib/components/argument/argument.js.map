{"version":3,"sources":["../../../src/components/argument/argument.ts"],"names":["Argument","from","child","parent","Array","isArray","value","rules","Error","format","template","fields","replace","key","get","substring","length","constructor","split","map","rule","Rule","isApplicable","platform","features","isAllowable","includes","toString","join","toJSON"],"mappings":";;;;;;;AACA;;AAcO,MAAMA,QAAN,CAAoC;AAE5B,SAAJC,IAAI,CAACC,KAAD,EAAiDC,MAAjD,EAAwF;AAC/F,QAAI,CAACA,MAAL,EAAa;AACT,UAAID,KAAK,YAAYF,QAArB,EAA+B,OAAOE,KAAP;AAC/BC,MAAAA,MAAM,GAAG,EAAT;AACH;;AAED,YAAQ,OAAOD,KAAf;AACI,WAAK,QAAL;AAAe;;AACf,WAAK,QAAL;AAAe;AACX,cAAIE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B,MADf,CAGX;;AAEA,gBAAM;AACFI,YAAAA,KADE;AAEFC,YAAAA,KAAK,GAAGJ,MAAM,CAACI;AAFb,cAGFL,KAHJ;AAKA,cAAII,KAAJ,EAAW,OAAO,IAAIN,QAAJ,CAAaM,KAAb,EAAoBC,KAApB,CAAP;AACd;;AACD;AAAS,cAAM,IAAIC,KAAJ,CAAU,wBAAV,CAAN;AAdb;;AAiBA,WAAO,IAAIR,QAAJ,CAAaE,KAAb,EAAoBC,MAAM,CAACI,KAA3B,CAAP;AACH;;AAEY,SAANE,MAAM,CAACC,QAAD,EAAmBC,MAAnB,EAAwD;AACjE,WAAOD,QAAQ,CAACE,OAAT,CAAiB,aAAjB,EAAgCC,GAAG;AAAA;;AAAA,4BAAIF,MAAM,CAACG,GAAP,CAAWD,GAAG,CAACE,SAAJ,CAAc,CAAd,EAAiBA,SAAjB,CAA2B,CAA3B,EAA8BF,GAAG,CAACG,MAAJ,GAAa,CAA3C,CAAX,CAAJ,qDAAiEH,GAAjE;AAAA,KAAnC,CAAP;AACH,GA9BsC,CA8BrC;;;AAKFI,EAAAA,WAAW,CACPX,KADO,EAEPC,KAAuB,GAAG,EAFnB,EAGT;AACE,SAAKD,KAAL,GAAaF,KAAK,CAACC,OAAN,CAAcC,KAAd,IAAuBA,KAAvB,GAA+BA,KAAK,CAACY,KAAN,CAAY,KAAZ,CAA5C;AACA,SAAKX,KAAL,GAAaA,KAAK,CAACY,GAAN,CAAUC,IAAI,IAAIC,WAAKpB,IAAL,CAAUmB,IAAV,CAAlB,CAAb;AACH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIE,EAAAA,YAAY,CAACC,QAAD,EAA+BC,QAAiC,GAAG,EAAnE,EAAgF;AACxF,WAAO,CAAC,KAAKjB,KAAL,CAAWY,GAAX,CAAeC,IAAI,IAAIA,IAAI,CAACK,WAAL,CAAiBF,QAAjB,EAA2BC,QAA3B,CAAvB,EAA6DE,QAA7D,CAAsE,KAAtE,CAAR;AACH;AAED;AACJ;AACA;;;AACIjB,EAAAA,MAAM,CAACE,MAAD,EAAwC;AAC1C,WAAO,KAAKL,KAAL,CAAWa,GAAX,CAAeb,KAAK,IAAIN,QAAQ,CAACS,MAAT,CAAgBH,KAAhB,EAAuBK,MAAvB,CAAxB,CAAP;AACH;;AAEDgB,EAAAA,QAAQ,GAAW;AACf,WAAO,KAAKrB,KAAL,CAAWsB,IAAX,CAAgB,GAAhB,CAAP;AACH;;AAEDC,EAAAA,MAAM,GAAuB;AACzB,UAAMvB,KAAK,GAAG,KAAKqB,QAAL,EAAd;AACA,UAAMpB,KAAK,GAAG,KAAKA,KAAnB;AACA,WAAQA,KAAK,CAACS,MAAP,GAAiB;AAAEV,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAjB,GAAoCD,KAA3C;AACH;;AAtEsC","sourcesContent":["\nimport { Rule, IRule } from '../rule';\nimport { IPlatform } from '../platform';\n\nexport interface IArgument {\n\n    /**\n     * An argument or a args list.\n     */\n    value: string | string[];\n\n    rules: Array<Partial<IRule>>;\n\n}\n\nexport class Argument implements IArgument {\n\n    static from(child: IArgument['value'] | Partial<IArgument>, parent?: Partial<IArgument>): Argument {\n        if (!parent) {\n            if (child instanceof Argument) return child;\n            parent = {};\n        }\n\n        switch (typeof child) {\n            case 'string': break;\n            case 'object': {\n                if (Array.isArray(child)) break;\n\n                // TODO child arg' rules extends parent arg rules\n\n                const {\n                    value,\n                    rules = parent.rules,\n                } = child;\n\n                if (value) return new Argument(value, rules);\n            }\n            default: throw new Error('missing argument value');\n        }\n\n        return new Argument(child, parent.rules);\n    }\n\n    static format(template: string, fields: Map<string, string>): string {\n        return template.replace(/\\$\\{(.*?)}/g, key => fields.get(key.substring(2).substring(0, key.length - 3)) ?? key);\n    } // github.com/voxelum/minecraft-launcher-core-node/blob/3d5aa7a38cbc66cdfc9b9d68a8bdf4988905cb72/packages/core/launch.ts\n\n    public value: string[];\n    public rules: Rule[];\n\n    constructor(\n        value: IArgument['value'],\n        rules: Partial<IRule>[] = [],\n    ) {\n        this.value = Array.isArray(value) ? value : value.split(/\\s/g);\n        this.rules = rules.map(rule => Rule.from(rule));\n    }\n\n    /**\n     * Checks if this argument is applicable to the current platform and features.\n     *\n     * @param platform The current platform.\n     * @param features The current featutes.\n     *\n     * @returns Is argument applicable?\n     */\n    isApplicable(platform: Partial<IPlatform>, features: Record<string, unknown> = {}): boolean {\n        return !this.rules.map(rule => rule.isAllowable(platform, features)).includes(false);\n    }\n\n    /**\n     * Formats and returns this argument as a string.\n     */\n    format(fields: Map<string, string>): string[] {\n        return this.value.map(value => Argument.format(value, fields));\n    }\n\n    toString(): string {\n        return this.value.join(' ');\n    }\n\n    toJSON(): string | IArgument {\n        const value = this.toString();\n        const rules = this.rules;\n        return (rules.length) ? { value, rules } : value;\n    }\n\n}\n"],"file":"argument.js"}