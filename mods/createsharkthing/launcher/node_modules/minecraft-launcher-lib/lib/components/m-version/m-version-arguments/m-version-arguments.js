"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MVersionArguments = void 0;

var _argument = require("../../argument");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MVersionArguments {
  static from(child, parent) {
    if (!parent) {
      if (child instanceof MVersionArguments) return child;
      parent = {};
    }

    const {
      game = parent.game,
      jvm = parent.jvm
    } = child;
    return new MVersionArguments(game, jvm);
  }

  static fromLegacyArguments(minecraftArguments) {
    return new MVersionArguments(minecraftArguments.split(/\s(?!\$)/g));
  }

  constructor(game = [], jvm = MVersionArguments.DEFAULT_JVM_ARGS.concat()) {
    this._game = game.map(gameArg => _argument.Argument.from(gameArg));
    this._jvm = jvm.map(jvmArg => _argument.Argument.from(jvmArg));
  }

  get game() {
    return this._game;
  }

  set game(game) {
    this._game = game.map(gameArg => _argument.Argument.from(gameArg));
  }

  get jvm() {
    return this._jvm;
  }

  set jvm(jvm) {
    this._jvm = jvm.map(jvmArg => _argument.Argument.from(jvmArg));
  }

  toJSON() {
    const {
      game,
      jvm
    } = this;
    return {
      game,
      jvm
    };
  }

}

exports.MVersionArguments = MVersionArguments;

_defineProperty(MVersionArguments, "DEFAULT_JVM_ARGS", [['-Dminecraft.launcher.brand=${launcher_name}'], ['-Dminecraft.launcher.version=${launcher_version}'], ['-Djava.library.path=${natives_directory}'], ['-cp', '${classpath}']]);
//# sourceMappingURL=m-version-arguments.js.map