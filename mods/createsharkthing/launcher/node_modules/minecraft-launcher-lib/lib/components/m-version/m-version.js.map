{"version":3,"sources":["../../../src/components/m-version/m-version.ts"],"names":["MVersion","from","child","parent","assetIndex","_assetIndex","downloads","_downloads","libraries","_libs","arguments","_args","game","jvm","id","type","assets","mainClass","libs","args","minecraftArguments","Error","flatLibs","map","name","filter","_lib","includes","forEach","push","_versionArgs","MVersionArguments","versionArgs","flatArgsSep","flatGameArgs","value","join","_arg","flatJvmArgs","fromLegacyArguments","concat","MVersionAssetIndexArtifact","path","constructor","inheritsFrom","MVersionDownloads","lib","Library","toString","toJSON"],"mappings":"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","sourcesContent":["\nimport { MVersionDownloads, IMVersionDownloads } from './m-version-downloads';\nimport { MVersionArguments, IMVersionArguments } from './m-version-arguments';\nimport { Library, ILibrary } from '../library';\nimport { MVersionAssetIndexArtifact, IMVersionAssetIndexArtifact } from './m-version-asset-index-artifact';\n\nexport interface IMVersion {\n\n    id: string;\n    type: string;\n    assets: string;\n    assetIndex: Partial<IMVersionAssetIndexArtifact>;\n    mainClass: string;\n    downloads: Partial<IMVersionDownloads>;\n    libraries: Partial<ILibrary>[];\n    arguments: Partial<IMVersionArguments>;\n\n    /**\n     * *(only child versions)*\n     */\n    inheritsFrom?: string;\n\n    /**\n     * *(only old versions)*\n     */\n    minecraftArguments?: string;\n\n}\n\nexport class MVersion {\n\n    static from(child: Partial<IMVersion>, parent?: Partial<IMVersion>): MVersion {\n        if (!parent) {\n            if (child instanceof MVersion) return child;\n            parent = {};\n        }\n\n        const {\n            assetIndex: _assetIndex = {},\n            downloads: _downloads = {},\n            libraries: _libs = [],\n            arguments: _args = { game: [], jvm: [] },\n        } = parent;\n        const {\n            id = parent.id,\n            type = parent.type,\n            assets = parent.assets,\n            assetIndex = _assetIndex,\n            mainClass = parent.mainClass,\n            downloads = _downloads,\n            libraries: libs = _libs,\n            arguments: args = _args,\n            minecraftArguments = parent.minecraftArguments,\n        } = child;\n\n        if (!mainClass) throw new Error('minecraft version main class is not string');\n        if (!id) throw new Error('minecraft version id is not string');\n        if (!type) throw new Error('minecraft version type is not string');\n        if (!assets) throw new Error('minecraft version assets id is not string');\n\n        {\n            const flatLibs = libs.map(({ name }) => name);\n            _libs.filter(_lib => !flatLibs.includes(_lib.name)).forEach(_lib => libs.push(_lib));\n        } // consolidate libs\n\n        const _versionArgs = MVersionArguments.from(_args);\n        const versionArgs = MVersionArguments.from(args);\n\n        {\n            const flatArgsSep = ' ';\n\n            {\n                const flatGameArgs = versionArgs.game.map(({ value }) => value.join(flatArgsSep));\n                _versionArgs.game\n                    .filter(_arg => {\n                        return !flatGameArgs.includes(_arg.value.join(flatArgsSep));\n                    })\n                    .forEach(_arg => versionArgs.game.push(_arg));\n            }\n\n            {\n                const flatJvmArgs = versionArgs.jvm.map(({ value }) => value.join(flatArgsSep));\n                _versionArgs.jvm\n                    .filter(_arg => {\n                        return !flatJvmArgs.includes(_arg.value.join(flatArgsSep));\n                    })\n                    .forEach(_arg => versionArgs.jvm.push(_arg));\n            }\n        } // consolidate args\n\n        if (minecraftArguments) {\n            const { game, jvm } = MVersionArguments.fromLegacyArguments(minecraftArguments);\n            versionArgs.game = game.concat(versionArgs.game);\n            versionArgs.jvm = jvm.concat(versionArgs.jvm);\n        }\n\n        return new MVersion(\n            id,\n            type,\n            assets,\n            MVersionAssetIndexArtifact.from(assetIndex, { path: assets + '.json' }),\n            mainClass,\n            downloads,\n            libs,\n            versionArgs,\n        );\n    }\n\n    private _assetIndex: MVersionAssetIndexArtifact;\n    private _downloads: MVersionDownloads;\n    private _libs: Library[];\n    private _args: MVersionArguments;\n\n    constructor(\n        public id: string,\n        public type: string,\n        public assets: string,\n        assetIndex: Partial<IMVersionAssetIndexArtifact>,\n        public mainClass: string,\n        downloads: Partial<IMVersionDownloads>,\n        libs: Partial<ILibrary>[] = [],\n        args: Partial<IMVersionArguments> = {},\n        public inheritsFrom?: string,\n    ) {\n        this._assetIndex = MVersionAssetIndexArtifact.from(assetIndex);\n        this._downloads = MVersionDownloads.from(downloads);\n        this._args = MVersionArguments.from(args);\n        this._libs = libs.map(lib => Library.from(lib));\n    }\n\n    get downloads(): MVersionDownloads {\n        return this._downloads;\n    }\n\n    set downloads(downloads: MVersionDownloads) {\n        this._downloads = MVersionDownloads.from(downloads);\n    }\n\n    get libraries(): Library[] {\n        return this.libs;\n    }\n\n    set libraries(libs: Library[]) {\n        this.libs = libs;\n    }\n\n    get libs(): Library[] {\n        return this._libs;\n    }\n\n    set libs(libs: Library[]) {\n        this._libs = libs.map(lib => Library.from(lib));\n    }\n\n    get args(): MVersionArguments {\n        return this._args;\n    }\n\n    set args(args: MVersionArguments) {\n        this._args = MVersionArguments.from(args);\n    }\n\n    get assetIndex(): MVersionAssetIndexArtifact {\n        return this._assetIndex;\n    }\n\n    set assetIndex(assetIndex: MVersionAssetIndexArtifact) {\n        this._assetIndex = MVersionAssetIndexArtifact.from(assetIndex);\n    }\n\n    toString(): string {\n        return this.id;\n    }\n\n    toJSON(): IMVersion {\n        const {\n            id,\n            type,\n            assets,\n            downloads,\n            args,\n            libraries,\n            mainClass,\n            assetIndex,\n            inheritsFrom,\n        } = this;\n        return {\n            id,\n            type,\n            assets,\n            downloads,\n            'arguments': args,\n            libraries,\n            mainClass,\n            assetIndex,\n            inheritsFrom,\n        };\n    }\n\n}\n"],"file":"m-version.js"}