import { MVersionDownloads, IMVersionDownloads } from './m-version-downloads';
import { MVersionArguments, IMVersionArguments } from './m-version-arguments';
import { Library, ILibrary } from '../library';
import { MVersionAssetIndexArtifact, IMVersionAssetIndexArtifact } from './m-version-asset-index-artifact';
export interface IMVersion {
    id: string;
    type: string;
    assets: string;
    assetIndex: Partial<IMVersionAssetIndexArtifact>;
    mainClass: string;
    downloads: Partial<IMVersionDownloads>;
    libraries: Partial<ILibrary>[];
    arguments: Partial<IMVersionArguments>;
    /**
     * *(only child versions)*
     */
    inheritsFrom?: string;
    /**
     * *(only old versions)*
     */
    minecraftArguments?: string;
}
export declare class MVersion {
    id: string;
    type: string;
    assets: string;
    mainClass: string;
    inheritsFrom?: string | undefined;
    static from(child: Partial<IMVersion>, parent?: Partial<IMVersion>): MVersion;
    private _assetIndex;
    private _downloads;
    private _libs;
    private _args;
    constructor(id: string, type: string, assets: string, assetIndex: Partial<IMVersionAssetIndexArtifact>, mainClass: string, downloads: Partial<IMVersionDownloads>, libs?: Partial<ILibrary>[], args?: Partial<IMVersionArguments>, inheritsFrom?: string | undefined);
    get downloads(): MVersionDownloads;
    set downloads(downloads: MVersionDownloads);
    get libraries(): Library[];
    set libraries(libs: Library[]);
    get libs(): Library[];
    set libs(libs: Library[]);
    get args(): MVersionArguments;
    set args(args: MVersionArguments);
    get assetIndex(): MVersionAssetIndexArtifact;
    set assetIndex(assetIndex: MVersionAssetIndexArtifact);
    toString(): string;
    toJSON(): IMVersion;
}
