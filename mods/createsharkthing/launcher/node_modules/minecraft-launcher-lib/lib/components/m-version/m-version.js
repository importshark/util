"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MVersion = void 0;

var _mVersionDownloads = require("./m-version-downloads");

var _mVersionArguments = require("./m-version-arguments");

var _library = require("../library");

var _mVersionAssetIndexArtifact = require("./m-version-asset-index-artifact");

class MVersion {
  static from(child, parent) {
    if (!parent) {
      if (child instanceof MVersion) return child;
      parent = {};
    }

    const {
      assetIndex: _assetIndex = {},
      downloads: _downloads = {},
      libraries: _libs = [],
      arguments: _args = {
        game: [],
        jvm: []
      }
    } = parent;
    const {
      id = parent.id,
      type = parent.type,
      assets = parent.assets,
      assetIndex = _assetIndex,
      mainClass = parent.mainClass,
      downloads = _downloads,
      libraries: libs = _libs,
      arguments: args = _args,
      minecraftArguments = parent.minecraftArguments
    } = child;
    if (!mainClass) throw new Error('minecraft version main class is not string');
    if (!id) throw new Error('minecraft version id is not string');
    if (!type) throw new Error('minecraft version type is not string');
    if (!assets) throw new Error('minecraft version assets id is not string');
    {
      const flatLibs = libs.map(({
        name
      }) => name);

      _libs.filter(_lib => !flatLibs.includes(_lib.name)).forEach(_lib => libs.push(_lib));
    } // consolidate libs

    const _versionArgs = _mVersionArguments.MVersionArguments.from(_args);

    const versionArgs = _mVersionArguments.MVersionArguments.from(args);

    {
      const flatArgsSep = ' ';
      {
        const flatGameArgs = versionArgs.game.map(({
          value
        }) => value.join(flatArgsSep));

        _versionArgs.game.filter(_arg => {
          return !flatGameArgs.includes(_arg.value.join(flatArgsSep));
        }).forEach(_arg => versionArgs.game.push(_arg));
      }
      {
        const flatJvmArgs = versionArgs.jvm.map(({
          value
        }) => value.join(flatArgsSep));

        _versionArgs.jvm.filter(_arg => {
          return !flatJvmArgs.includes(_arg.value.join(flatArgsSep));
        }).forEach(_arg => versionArgs.jvm.push(_arg));
      }
    } // consolidate args

    if (minecraftArguments) {
      const {
        game,
        jvm
      } = _mVersionArguments.MVersionArguments.fromLegacyArguments(minecraftArguments);

      versionArgs.game = game.concat(versionArgs.game);
      versionArgs.jvm = jvm.concat(versionArgs.jvm);
    }

    return new MVersion(id, type, assets, _mVersionAssetIndexArtifact.MVersionAssetIndexArtifact.from(assetIndex, {
      path: assets + '.json'
    }), mainClass, downloads, libs, versionArgs);
  }

  constructor(id, type, assets, assetIndex, mainClass, downloads, libs = [], args = {}, inheritsFrom) {
    this.id = id;
    this.type = type;
    this.assets = assets;
    this.mainClass = mainClass;
    this.inheritsFrom = inheritsFrom;
    this._assetIndex = _mVersionAssetIndexArtifact.MVersionAssetIndexArtifact.from(assetIndex);
    this._downloads = _mVersionDownloads.MVersionDownloads.from(downloads);
    this._args = _mVersionArguments.MVersionArguments.from(args);
    this._libs = libs.map(lib => _library.Library.from(lib));
  }

  get downloads() {
    return this._downloads;
  }

  set downloads(downloads) {
    this._downloads = _mVersionDownloads.MVersionDownloads.from(downloads);
  }

  get libraries() {
    return this.libs;
  }

  set libraries(libs) {
    this.libs = libs;
  }

  get libs() {
    return this._libs;
  }

  set libs(libs) {
    this._libs = libs.map(lib => _library.Library.from(lib));
  }

  get args() {
    return this._args;
  }

  set args(args) {
    this._args = _mVersionArguments.MVersionArguments.from(args);
  }

  get assetIndex() {
    return this._assetIndex;
  }

  set assetIndex(assetIndex) {
    this._assetIndex = _mVersionAssetIndexArtifact.MVersionAssetIndexArtifact.from(assetIndex);
  }

  toString() {
    return this.id;
  }

  toJSON() {
    const {
      id,
      type,
      assets,
      downloads,
      args,
      libraries,
      mainClass,
      assetIndex,
      inheritsFrom
    } = this;
    return {
      id,
      type,
      assets,
      downloads,
      'arguments': args,
      libraries,
      mainClass,
      assetIndex,
      inheritsFrom
    };
  }

}

exports.MVersion = MVersion;
//# sourceMappingURL=m-version.js.map