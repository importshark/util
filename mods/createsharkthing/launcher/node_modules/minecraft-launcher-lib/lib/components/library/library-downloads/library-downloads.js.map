{"version":3,"sources":["../../../../src/components/library/library-downloads/library-downloads.ts"],"names":["LibraryDownloads","from","libraryDownloads","parentLibrary","natives","name","Error","artifact","classifiers","Object","entries","map","os","classifier","include","filter","forEach","nameWithNativeClassifier","Library","concatNameWithClassifier","Artifact","fromEntries","nameWithClassifier","constructor","setArtifactByClassifier","_artifact","_classifiers","getArtifactByClassifier","toJSON"],"mappings":"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","sourcesContent":["\nimport { Artifact, IArtifact } from '../../artifact';\nimport { Library, ILibrary } from '../library';\n\nexport interface ILibraryDownloads {\n    artifact: Partial<IArtifact>;\n    classifiers: {\n        [classifier: string]: Partial<IArtifact>;\n    };\n}\n\nexport class LibraryDownloads implements ILibraryDownloads {\n\n    static from(\n        libraryDownloads: Partial<ILibraryDownloads>,\n        parentLibrary?: Pick<Partial<ILibrary>, 'name' | 'natives'>,\n    ): LibraryDownloads {\n        if (!parentLibrary) {\n            if (libraryDownloads instanceof LibraryDownloads) return libraryDownloads;\n            parentLibrary = {};\n        }\n\n        const {\n            natives = {},\n            name,\n        } = parentLibrary;\n\n        if (!name) throw new Error('missing parent library name');\n\n        const {\n            artifact = {},\n            classifiers = {},\n        } = libraryDownloads;\n\n        Object\n            .entries(natives)\n            .map(([os, classifier]) => {\n                if (typeof classifier !== 'string') throw new Error('library native artifact classifier is not string');\n                return {\n                    classifier,\n                    os,\n                    include: classifier in classifiers,\n                };\n            })\n            .filter(({ include }) => !include)\n            .forEach(({ classifier }) => {\n                const nameWithNativeClassifier = Library.concatNameWithClassifier(name, classifier);\n                classifiers[classifier] = Artifact.from(nameWithNativeClassifier);\n            }); // construct missing natives // TODO format classifier\n\n        return new LibraryDownloads(\n            Artifact.from(artifact, name),\n            Object.fromEntries(\n                Object\n                    .entries(classifiers)\n                    .map(([classifier, artifact]) => {\n                        const nameWithClassifier = Library.concatNameWithClassifier(name, classifier);\n                        return [classifier, Artifact.from(artifact, nameWithClassifier)];\n                    }),\n            ),\n        );\n    }\n\n    private _artifact: Artifact;\n    private _classifiers: Record<string, Artifact> = {};\n\n    constructor(artifact: Partial<IArtifact>, classifiers: ILibraryDownloads['classifiers'] = {}) {\n        Object.entries(classifiers).forEach(([classifier, artifact]) => this.setArtifactByClassifier(classifier, artifact));\n        this._artifact = Artifact.from(artifact);\n    }\n\n    get artifact(): Artifact { return this._artifact; }\n\n    set artifact(artifact: Artifact) {\n        this._artifact = Artifact.from(artifact);\n    }\n\n    get classifiers(): Record<string, Artifact> {\n        return this._classifiers;\n    }\n\n    // TODO set classifiers(classifiers: Record<string, Artifact>) { }\n\n    setArtifactByClassifier(classifier: string, artifact: Partial<IArtifact>): Artifact {\n        return this._classifiers[classifier] = Artifact.from(artifact);\n    }\n\n    getArtifactByClassifier(classifier: string): Artifact {\n        return this._classifiers[classifier];\n    }\n\n    toJSON(): ILibraryDownloads {\n        const {\n            artifact,\n            classifiers,\n        } = this;\n        return {\n            artifact,\n            classifiers,\n        };\n    }\n\n}\n"],"file":"library-downloads.js"}