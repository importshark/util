"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LibraryDownloads = void 0;

var _artifact = require("../../artifact");

var _library = require("../library");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class LibraryDownloads {
  static from(libraryDownloads, parentLibrary) {
    if (!parentLibrary) {
      if (libraryDownloads instanceof LibraryDownloads) return libraryDownloads;
      parentLibrary = {};
    }

    const {
      natives = {},
      name
    } = parentLibrary;
    if (!name) throw new Error('missing parent library name');
    const {
      artifact = {},
      classifiers = {}
    } = libraryDownloads;
    Object.entries(natives).map(([os, classifier]) => {
      if (typeof classifier !== 'string') throw new Error('library native artifact classifier is not string');
      return {
        classifier,
        os,
        include: classifier in classifiers
      };
    }).filter(({
      include
    }) => !include).forEach(({
      classifier
    }) => {
      const nameWithNativeClassifier = _library.Library.concatNameWithClassifier(name, classifier);

      classifiers[classifier] = _artifact.Artifact.from(nameWithNativeClassifier);
    }); // construct missing natives // TODO format classifier

    return new LibraryDownloads(_artifact.Artifact.from(artifact, name), Object.fromEntries(Object.entries(classifiers).map(([classifier, artifact]) => {
      const nameWithClassifier = _library.Library.concatNameWithClassifier(name, classifier);

      return [classifier, _artifact.Artifact.from(artifact, nameWithClassifier)];
    })));
  }

  constructor(artifact, classifiers = {}) {
    _defineProperty(this, "_classifiers", {});

    Object.entries(classifiers).forEach(([classifier, artifact]) => this.setArtifactByClassifier(classifier, artifact));
    this._artifact = _artifact.Artifact.from(artifact);
  }

  get artifact() {
    return this._artifact;
  }

  set artifact(artifact) {
    this._artifact = _artifact.Artifact.from(artifact);
  }

  get classifiers() {
    return this._classifiers;
  } // TODO set classifiers(classifiers: Record<string, Artifact>) { }


  setArtifactByClassifier(classifier, artifact) {
    return this._classifiers[classifier] = _artifact.Artifact.from(artifact);
  }

  getArtifactByClassifier(classifier) {
    return this._classifiers[classifier];
  }

  toJSON() {
    const {
      artifact,
      classifiers
    } = this;
    return {
      artifact,
      classifiers
    };
  }

}

exports.LibraryDownloads = LibraryDownloads;
//# sourceMappingURL=library-downloads.js.map