{"version":3,"sources":["../../../src/components/library/library.ts"],"names":["Library","from","lib","name","downloads","extract","rules","natives","Error","LibraryDownloads","concatNameWithClassifier","classifier","s","parts","split","group","artifact","unsplittedVersion","version","versionExtension","join","constructor","os","Platform","current","_downloads","exclude","_extract","_rules","map","rule","Rule","isApplicable","platform","features","isAllowable","includes","getNativeClassifier","format","arch","Argument","Map","match","shift","toString","toJSON"],"mappings":"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","sourcesContent":["\nimport { Rule, IRule } from '../rule';\nimport { Platform, OS, IPlatform } from '../platform';\nimport { Argument } from '../argument';\nimport { LibraryDownloads, ILibraryDownloads } from './library-downloads';\n\nexport interface ILibrary {\n\n    downloads: Partial<ILibraryDownloads>;\n\n    /**\n     * The library id, it like `<group>:<artifact>:<version>` or `<group>:<artifact>:<version>@<ext>`.\n     */\n    name: string;\n\n    /**\n     * The native atrifacts classifiers, e.g. `'linux': 'natives-linux'`.\n     */\n    natives: Partial<Record<OS, string>>;\n\n    extract: {\n        exclude?: string[];\n    };\n\n    rules: Partial<IRule>[];\n\n}\n\nexport class Library implements ILibrary {\n\n    static from(lib: string | Partial<ILibrary>): Library {\n        if (typeof lib !== 'string') {\n            if (lib instanceof Library) return lib;\n        } else {\n            return new Library(lib);\n        }\n\n        const {\n            name,\n            downloads = {},\n            extract,\n            rules,\n            natives,\n        } = lib;\n\n        if (!name) throw new Error('missing library name');\n\n        return new Library(\n            name,\n            LibraryDownloads.from(downloads, { name, natives }),\n            natives,\n            extract,\n            rules,\n        );\n    }\n\n    static concatNameWithClassifier(name: string, classifier: string): string {\n        const s = ':';\n        const parts = name.split(s);\n        const [group, artifact, unsplittedVersion] = parts;\n        const [version, versionExtension] = unsplittedVersion.split('@');\n\n        return [\n            group,\n            artifact,\n            version,\n            versionExtension ? classifier + '@' + versionExtension : classifier,\n        ].join(s);\n    }\n\n    private _downloads: LibraryDownloads;\n    private _extract: Required<ILibrary['extract']>;\n    private _rules: Rule[];\n\n    constructor(\n        public name: string,\n        downloads: Partial<ILibraryDownloads> = {},\n        public natives: ILibrary['natives'] = {},\n        extract: ILibrary['extract'] = {},\n        rules: Partial<IRule>[] = [],\n    ) {\n        this._downloads = LibraryDownloads.from(downloads, { name, natives });\n\n        const { exclude = ['META-INF/'] } = extract;\n        this._extract = { exclude };\n\n        this._rules = rules.map(rule => Rule.from(rule));\n    }\n\n    get downloads(): LibraryDownloads { return this._downloads; }\n\n    set downloads(downloads: LibraryDownloads) {\n        this._downloads = LibraryDownloads.from(downloads, this);\n    }\n\n    get extract(): Required<ILibrary['extract']> { return this._extract; }\n\n    get rules(): Rule[] { return this._rules; }\n\n    set rules(rules: Rule[]) {\n        this._rules = rules.map(rule => Rule.from(rule));\n    }\n\n    /**\n     * Checks if this library is applicable to the current platform and features.\n     *\n     * @param platform The current platform.\n     * @param features The current featutes.\n     *\n     * @returns Is library applicable?\n     */\n    isApplicable(\n        platform: Partial<IPlatform> = {},\n        features: Record<string, unknown> = {},\n    ): boolean {\n        return !this.rules.map(rule => rule.isAllowable(platform, features)).includes(false);\n    }\n\n    hasNative = (os: OS = Platform.current.name): boolean => os in this.natives;\n\n    /**\n     * Gets its native classifier or throws an error, if library has not native classifier.\n     *\n     * @param platform The current platform.\n     * @param format Format the result?\n     *\n     * @returns The native classifier.\n     */\n    getNativeClassifier(platform: Partial<IPlatform> = {}, format = false): string {\n        const { name, arch } = Platform.from(platform);\n        const classifier = this.natives[name];\n\n        if (!classifier) throw new Error('library has not native classifier');\n\n        return format ? Argument.format(\n            classifier,\n            new Map([\n                ['arch', arch.match(/\\d\\d/g)?.shift() ?? '32'],\n            ]),\n        ) : classifier;\n    }\n\n    toString(): string { return this.name; }\n\n    toJSON(): ILibrary {\n        const {\n            name,\n            downloads,\n            natives,\n            extract,\n            rules,\n        } = this;\n        return {\n            name,\n            downloads,\n            natives,\n            extract,\n            rules,\n        };\n    }\n\n}\n"],"file":"library.js"}