import { Rule, IRule } from '../rule';
import { OS, IPlatform } from '../platform';
import { LibraryDownloads, ILibraryDownloads } from './library-downloads';
export interface ILibrary {
    downloads: Partial<ILibraryDownloads>;
    /**
     * The library id, it like `<group>:<artifact>:<version>` or `<group>:<artifact>:<version>@<ext>`.
     */
    name: string;
    /**
     * The native atrifacts classifiers, e.g. `'linux': 'natives-linux'`.
     */
    natives: Partial<Record<OS, string>>;
    extract: {
        exclude?: string[];
    };
    rules: Partial<IRule>[];
}
export declare class Library implements ILibrary {
    name: string;
    natives: ILibrary['natives'];
    static from(lib: string | Partial<ILibrary>): Library;
    static concatNameWithClassifier(name: string, classifier: string): string;
    private _downloads;
    private _extract;
    private _rules;
    constructor(name: string, downloads?: Partial<ILibraryDownloads>, natives?: ILibrary['natives'], extract?: ILibrary['extract'], rules?: Partial<IRule>[]);
    get downloads(): LibraryDownloads;
    set downloads(downloads: LibraryDownloads);
    get extract(): Required<ILibrary['extract']>;
    get rules(): Rule[];
    set rules(rules: Rule[]);
    /**
     * Checks if this library is applicable to the current platform and features.
     *
     * @param platform The current platform.
     * @param features The current featutes.
     *
     * @returns Is library applicable?
     */
    isApplicable(platform?: Partial<IPlatform>, features?: Record<string, unknown>): boolean;
    hasNative: (os?: OS) => boolean;
    /**
     * Gets its native classifier or throws an error, if library has not native classifier.
     *
     * @param platform The current platform.
     * @param format Format the result?
     *
     * @returns The native classifier.
     */
    getNativeClassifier(platform?: Partial<IPlatform>, format?: boolean): string;
    toString(): string;
    toJSON(): ILibrary;
}
