{"version":3,"sources":["../../../src/components/util/util.ts"],"names":["readJson","path","encoding","JSON","parse","calculateHash","algorithm","update","digest","exists","constants","F_OK","then"],"mappings":";;;;;;;;AACA;;AACA;;AACA;;AAEO,MAAMA,QAAQ,GAAG,OAAUC,IAAV,EAAwBC,QAAwB,GAAG,OAAnD,KAA2EC,IAAI,CAACC,KAAL,CAAW,MAAM,wBAASH,IAAT,EAAeC,QAAf,CAAjB,CAA5F;;;;AAEA,eAAeG,aAAf,CAA6BJ,IAA7B,EAA2CK,SAAS,GAAG,MAAvD,EAAgF;AACnF,SAAO,wBAAWA,SAAX,EACFC,MADE,CACK,MAAM,wBAASN,IAAT,CADX,EAEFO,MAFE,CAEK,KAFL,CAAP;AAGH;;AAEM,MAAMC,MAAM,GAAIR,IAAD,IAAoC,sBAAOA,IAAP,EAAaS,cAAUC,IAAvB,EAA6BC,IAA7B,CAAkC,MAAM,IAAxC,EAA8C,MAAM,KAApD,CAAnD","sourcesContent":["\nimport { constants } from 'fs';\nimport { readFile, access } from 'fs/promises';\nimport { createHash } from 'crypto';\n\nexport const readJson = async <J>(path: string, encoding: BufferEncoding = 'utf-8'): Promise<J> => JSON.parse(await readFile(path, encoding));\n\nexport async function calculateHash(path: string, algorithm = 'sha1'): Promise<string> {\n    return createHash(algorithm)\n        .update(await readFile(path))\n        .digest('hex');\n}\n\nexport const exists = (path: string): Promise<boolean> => access(path, constants.F_OK).then(() => true, () => false);\n"],"file":"util.js"}