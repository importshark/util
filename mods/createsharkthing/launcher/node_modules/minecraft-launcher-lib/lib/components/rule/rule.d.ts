import { IPlatform } from '../platform';
export declare enum RuleAction {
    ALLOW = "allow",
    DISALLOW = "disallow"
}
export interface IRule {
    action: RuleAction;
    /**
     * The required platform.
     */
    os: Partial<IPlatform>;
    /**
     * The enabled or disabled features.
     */
    features: Record<string, unknown>;
}
export declare class Rule implements IRule {
    action: RuleAction;
    os: Partial<IPlatform>;
    features: Record<string, unknown>;
    static from(child: Partial<IRule>, parent?: Partial<IRule>): Rule;
    static sanitizeFeatures(features: Record<string, unknown>): Record<string, boolean>;
    constructor(action?: RuleAction, os?: Partial<IPlatform>, features?: Record<string, unknown>);
    /**
     * Compare the current platform and enabled features with params and features
     * of this rule required for this rule to take action.
     *
     * @param platform The current platform.
     * @param features The enabled or disabled features.
     *
     * @returns The result for this rule.
     */
    isAllowable(platform?: Partial<IPlatform>, features?: Record<string, unknown>): boolean;
    /**
     * Compare two boolean values using this rule's action.
     */
    compare(a: boolean, b: boolean): boolean;
}
