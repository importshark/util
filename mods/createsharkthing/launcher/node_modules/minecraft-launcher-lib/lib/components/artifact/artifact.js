"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Artifact = void 0;

var _path = require("path");

var _artifactDownloadTask = require("./artifact-task/artifact-download-task");

var _artifactExtractTask = require("./artifact-task/artifact-extract-task");

class Artifact {
  static from(child, parent) {
    switch (typeof child) {
      case 'string':
        return Artifact.fromId(child);

      case 'object':
        {
          if (!parent) {
            if (child instanceof Artifact) return child;
            parent = {};
          }

          const _parent = typeof parent !== 'string' ? parent : Artifact.fromId(parent);

          const {
            path = _parent.path,
            url = _parent.url,
            size = _parent.size,
            sha1 = _parent.sha1
          } = child;

          const errMsg = param => `missing artifact ${param}`;

          if (!path) throw new Error(errMsg('path'));
          if (!url) throw new Error(errMsg('url'));
          return new Artifact(path, url, size, sha1);
        }
    }
  }
  /**
   * Transform artifact id to artifact instance.
   *
   * @param id The artifact id. It should look like `<group>:<artifact>:<version>`, e.g. `com.mojang:patchy:1.1`.
   * @param repo It this usually looks like an URL address.
   * @param defaultExtension The default extension. It should look like `jar`, `tar.xz` or other.
   *
   * @return The artifact instance.
   */


  static fromId(id, repo = '/', defaultExtension = 'jar') {
    const parts = id.split(':');
    if (parts.length < 3) throw new Error('passed string is not include a valid artifact id');
    const [group, artifact, unsplittedVersion] = parts;
    const [version, versionExtension = defaultExtension] = unsplittedVersion.split('@');
    const paths = [...group.split('.'), artifact, version];

    if (parts.length > 3) {
      const [unsplittedClassifier] = parts.slice(3);
      const [classifier, classifierExtension = defaultExtension] = unsplittedClassifier.split('@');
      paths.push(`${artifact}-${version}-${classifier}.${classifierExtension}`);
    } else {
      paths.push(`${artifact}-${version}.${versionExtension}`);
    }

    return new Artifact((0, _path.join)(...paths), repo + '/' + paths.join('/'));
  }

  constructor(path, url, size, sha1) {
    this.path = path;
    this.url = url;
    this.size = size;
    this.sha1 = sha1;
  }
  /**
   * Transform this artifact to string representation.
   *
   * @returns The artifact id. It should look like `<group>:<artifact>:<version>@<extension>`, e.g. `com.mojang:patchy:1.1@jar`.
   */


  toString(defaultExtension = 'jar') {
    var _splittedTarget$rever;

    const parts = this.path.split('/').reverse();
    const target = parts.shift();
    const version = parts.shift();
    const artifact = parts.shift();
    const group = parts.reverse().join('.');
    if (!target || !version || !artifact) throw new Error('artifact path parse error');
    const targetSep = '-';
    const splittedTarget = target.split(targetSep);
    const i = splittedTarget.indexOf(version);
    const ext = i >= 1 ? splittedTarget.slice(i + 1).join(targetSep) : ((_splittedTarget$rever = splittedTarget.reverse().shift()) === null || _splittedTarget$rever === void 0 ? void 0 : _splittedTarget$rever.replace(version, '')) || defaultExtension;
    const extSep = '.';
    const idSep = ':';
    if (ext.startsWith(extSep)) return [group, artifact, version].join(idSep) + '@' + ext.replace(extSep, '');
    const splittedExtension = ext.split(extSep);
    const classifier = splittedExtension.shift();
    return [group, artifact, version, classifier].join(idSep) + '@' + splittedExtension.join(extSep);
  }

  downloadTo(directory) {
    return new _artifactDownloadTask.ArtifactDownloadTask(this, directory);
  }

  extractTo(artifactDirectory, extractionDirectory, exclude) {
    return new _artifactExtractTask.ArtifactExtractTask(this, artifactDirectory, extractionDirectory, exclude);
  }

  get filename() {
    return (0, _path.basename)(this.path);
  }

  get directory() {
    return (0, _path.dirname)(this.path);
  }

}

exports.Artifact = Artifact;
//# sourceMappingURL=artifact.js.map