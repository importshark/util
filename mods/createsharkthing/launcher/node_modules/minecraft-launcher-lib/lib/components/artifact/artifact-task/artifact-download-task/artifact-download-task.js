"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArtifactDownloadTaskEvent = exports.ArtifactDownloadTask = void 0;

var _fs = require("fs");

var _mkdirp = _interopRequireDefault(require("mkdirp"));

var _axios = _interopRequireDefault(require("axios"));

var _path = require("path");

var _artifactTask = require("../artifact-task");

var _util = require("../../../util");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

let ArtifactDownloadTaskEvent;
exports.ArtifactDownloadTaskEvent = ArtifactDownloadTaskEvent;

(function (ArtifactDownloadTaskEvent) {
  ArtifactDownloadTaskEvent["PROGRESS"] = "progress";
  ArtifactDownloadTaskEvent["ERROR"] = "error";
  ArtifactDownloadTaskEvent["FINISH"] = "finish";
})(ArtifactDownloadTaskEvent || (exports.ArtifactDownloadTaskEvent = ArtifactDownloadTaskEvent = {}));

class ArtifactDownloadTask extends _artifactTask.ArtifactTask {
  constructor(artifact, root) {
    super(artifact);
    this.root = root;
  }

  async start() {
    const directory = (0, _path.join)(this.root, this.artifact.directory);
    const directoryExist = await (0, _util.exists)(directory);
    if (!directoryExist) await (0, _mkdirp.default)(directory);
    const response = await (0, _axios.default)({
      method: 'GET',
      url: this.artifact.url,
      responseType: 'stream'
    });
    const progress = {
      recieved: 0,
      total: parseInt(response.headers['content-length'], 10)
    };
    response.data.on('data', chunk => {
      progress.recieved += chunk.length;
      this.emit(ArtifactDownloadTaskEvent.PROGRESS, progress);
    });
    const writeStream = (0, _fs.createWriteStream)((0, _path.join)(this.root, this.artifact.path));
    const wait = new Promise(resolve => {
      writeStream.on(ArtifactDownloadTaskEvent.ERROR, err => {
        this.emit(ArtifactDownloadTaskEvent.ERROR, err);
      }).on(ArtifactDownloadTaskEvent.FINISH, () => {
        this.emit(ArtifactDownloadTaskEvent.FINISH);
        resolve(this);
      });
    });
    response.data.pipe(writeStream);
    return wait;
  }

}

exports.ArtifactDownloadTask = ArtifactDownloadTask;
//# sourceMappingURL=artifact-download-task.js.map