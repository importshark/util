{"version":3,"sources":["../../../src/components/artifact/artifact.ts"],"names":["Artifact","from","child","parent","fromId","_parent","path","url","size","sha1","errMsg","param","Error","id","repo","defaultExtension","parts","split","length","group","artifact","unsplittedVersion","version","versionExtension","paths","unsplittedClassifier","slice","classifier","classifierExtension","push","join","constructor","toString","reverse","target","shift","targetSep","splittedTarget","i","indexOf","ext","replace","extSep","idSep","startsWith","splittedExtension","downloadTo","directory","ArtifactDownloadTask","extractTo","artifactDirectory","extractionDirectory","exclude","ArtifactExtractTask","filename"],"mappings":"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","sourcesContent":["\nimport { join, dirname, basename } from 'path';\nimport { ArtifactDownloadTask } from './artifact-task/artifact-download-task';\nimport { ArtifactExtractTask } from './artifact-task/artifact-extract-task';\n\nexport interface IArtifact {\n    path: string;\n    url: string;\n    size?: number;\n    sha1?: string;\n}\n\nexport class Artifact implements IArtifact {\n\n    static from(child: string | Partial<IArtifact>, parent?: string | Partial<IArtifact>): Artifact {\n        switch (typeof child) {\n            case 'string': return Artifact.fromId(child);\n            case 'object': {\n                if (!parent) {\n                    if (child instanceof Artifact) return child;\n                    parent = {};\n                }\n\n                const _parent = typeof parent !== 'string' ? parent : Artifact.fromId(parent);\n                const {\n                    path = _parent.path,\n                    url = _parent.url,\n                    size = _parent.size,\n                    sha1 = _parent.sha1,\n                } = child;\n\n                const errMsg = (param: string) => `missing artifact ${param}`;\n\n                if (!path) throw new Error(errMsg('path'));\n                if (!url) throw new Error(errMsg('url'));\n\n                return new Artifact(\n                    path,\n                    url,\n                    size,\n                    sha1,\n                );\n            }\n        }\n    }\n\n    /**\n     * Transform artifact id to artifact instance.\n     *\n     * @param id The artifact id. It should look like `<group>:<artifact>:<version>`, e.g. `com.mojang:patchy:1.1`.\n     * @param repo It this usually looks like an URL address.\n     * @param defaultExtension The default extension. It should look like `jar`, `tar.xz` or other.\n     *\n     * @return The artifact instance.\n     */\n    static fromId(id: string, repo: string = '/', defaultExtension: string = 'jar'): Artifact {\n        const parts = id.split(':');\n\n        if (parts.length < 3) throw new Error('passed string is not include a valid artifact id');\n\n        const [group, artifact, unsplittedVersion] = parts;\n        const [version, versionExtension = defaultExtension] = unsplittedVersion.split('@');\n        const paths: string[] = [...group.split('.'), artifact, version];\n\n        if (parts.length > 3) {\n            const [unsplittedClassifier] = parts.slice(3);\n            const [classifier, classifierExtension = defaultExtension] = unsplittedClassifier.split('@');\n            paths.push(`${artifact}-${version}-${classifier}.${classifierExtension}`);\n        } else {\n            paths.push(`${artifact}-${version}.${versionExtension}`);\n        }\n\n        return new Artifact(join(...paths), repo + '/' + paths.join('/'));\n    }\n\n    constructor(\n        public path: string,\n        public url: string,\n        public size?: number,\n        public sha1?: string,\n    ) { }\n\n    /**\n     * Transform this artifact to string representation.\n     *\n     * @returns The artifact id. It should look like `<group>:<artifact>:<version>@<extension>`, e.g. `com.mojang:patchy:1.1@jar`.\n     */\n    toString(defaultExtension = 'jar'): string {\n        const parts: string[] = this.path.split('/').reverse();\n        const target = parts.shift();\n        const version = parts.shift();\n        const artifact = parts.shift();\n        const group = parts.reverse().join('.');\n\n        if (!target || !version || !artifact) throw new Error('artifact path parse error');\n\n        const targetSep = '-';\n        const splittedTarget = target.split(targetSep);\n\n        const i = splittedTarget.indexOf(version);\n        const ext = (i >= 1) ? splittedTarget.slice(i + 1).join(targetSep) : (splittedTarget.reverse().shift()?.replace(version, '') || defaultExtension);\n\n        const extSep = '.';\n        const idSep = ':';\n\n        if (ext.startsWith(extSep)) return [group, artifact, version].join(idSep) + '@' + ext.replace(extSep, '');\n\n        const splittedExtension = ext.split(extSep);\n        const classifier = splittedExtension.shift();\n        return [group, artifact, version, classifier].join(idSep) + '@' + splittedExtension.join(extSep);\n    }\n\n    downloadTo(directory: string): ArtifactDownloadTask {\n        return new ArtifactDownloadTask(this, directory);\n    }\n\n    extractTo(\n        artifactDirectory: string,\n        extractionDirectory: string,\n        exclude?: string[],\n    ): ArtifactExtractTask {\n        return new ArtifactExtractTask(this, artifactDirectory, extractionDirectory, exclude);\n    }\n\n    get filename(): string {\n        return basename(this.path);\n    }\n\n    get directory(): string {\n        return dirname(this.path);\n    }\n\n}\n"],"file":"artifact.js"}