{"version":3,"sources":["../../../../../src/components/artifact/artifact-task/artifact-download-task/artifact-download-task.ts"],"names":["ArtifactDownloadTaskEvent","ArtifactDownloadTask","ArtifactTask","constructor","artifact","root","start","directory","directoryExist","response","method","url","responseType","progress","recieved","total","parseInt","headers","data","on","chunk","length","emit","PROGRESS","writeStream","path","wait","Promise","resolve","ERROR","err","FINISH","pipe"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;IAEkBA,yB;;;WAAAA,yB;AAAAA,EAAAA,yB;AAAAA,EAAAA,yB;AAAAA,EAAAA,yB;GAAAA,yB,yCAAAA,yB;;AAgBX,MAAMC,oBAAN,SAAmCC,0BAAnC,CAAgD;AAEnDC,EAAAA,WAAW,CACPC,QADO,EAESC,IAFT,EAGT;AACE,UAAMD,QAAN;AADF,SADkBC,IAClB,GADkBA,IAClB;AAED;;AAEU,QAALC,KAAK,GAAkB;AACzB,UAAMC,SAAS,GAAG,gBAAK,KAAKF,IAAV,EAAgB,KAAKD,QAAL,CAAcG,SAA9B,CAAlB;AACA,UAAMC,cAAc,GAAG,MAAM,kBAAOD,SAAP,CAA7B;AACA,QAAI,CAAEC,cAAN,EAAuB,MAAM,qBAAOD,SAAP,CAAN;AAEvB,UAAME,QAAoC,GAAG,MAAM,oBAAM;AACrDC,MAAAA,MAAM,EAAE,KAD6C;AAErDC,MAAAA,GAAG,EAAE,KAAKP,QAAL,CAAcO,GAFkC;AAGrDC,MAAAA,YAAY,EAAE;AAHuC,KAAN,CAAnD;AAMA,UAAMC,QAAuC,GAAG;AAC5CC,MAAAA,QAAQ,EAAE,CADkC;AAE5CC,MAAAA,KAAK,EAAEC,QAAQ,CAACP,QAAQ,CAACQ,OAAT,CAAiB,gBAAjB,CAAD,EAAqC,EAArC;AAF6B,KAAhD;AAKAR,IAAAA,QAAQ,CAACS,IAAT,CAAcC,EAAd,CAAiB,MAAjB,EAAyBC,KAAK,IAAI;AAC9BP,MAAAA,QAAQ,CAACC,QAAT,IAAqBM,KAAK,CAACC,MAA3B;AACA,WAAKC,IAAL,CAAUtB,yBAAyB,CAACuB,QAApC,EAA8CV,QAA9C;AACH,KAHD;AAKA,UAAMW,WAAW,GAAG,2BAAkB,gBAAK,KAAKnB,IAAV,EAAgB,KAAKD,QAAL,CAAcqB,IAA9B,CAAlB,CAApB;AAEA,UAAMC,IAAI,GAAG,IAAIC,OAAJ,CAAmBC,OAAD,IAAa;AACxCJ,MAAAA,WAAW,CACNL,EADL,CACQnB,yBAAyB,CAAC6B,KADlC,EAC0CC,GAAD,IAAS;AAC1C,aAAKR,IAAL,CAAUtB,yBAAyB,CAAC6B,KAApC,EAA2CC,GAA3C;AACH,OAHL,EAIKX,EAJL,CAIQnB,yBAAyB,CAAC+B,MAJlC,EAI0C,MAAM;AACxC,aAAKT,IAAL,CAAUtB,yBAAyB,CAAC+B,MAApC;AACAH,QAAAA,OAAO,CAAC,IAAD,CAAP;AACH,OAPL;AAQH,KATY,CAAb;AAWAnB,IAAAA,QAAQ,CAACS,IAAT,CAAcc,IAAd,CAAmBR,WAAnB;AAEA,WAAOE,IAAP;AACH;;AA9CkD","sourcesContent":["\nimport { createWriteStream } from 'fs';\nimport mkdirp from 'mkdirp';\nimport axios, { AxiosResponse } from 'axios';\nimport { join } from 'path';\nimport { IArtifact } from '../../artifact';\nimport { ArtifactTask } from '../artifact-task';\nimport { exists } from '../../../util';\n\nexport const enum ArtifactDownloadTaskEvent {\n    PROGRESS = 'progress',\n    ERROR = 'error',\n    FINISH = 'finish',\n}\n\ninterface AxiosStream {\n    on(e: 'data', listener: (data: Buffer) => void): this;\n    pipe<T>(destination: T): T;\n}\n\nexport interface IArtifactDownloadTaskProgress {\n    recieved: number;\n    total: number;\n}\n\nexport class ArtifactDownloadTask extends ArtifactTask {\n\n    constructor(\n        artifact: Partial<IArtifact>,\n        public readonly root: string,\n    ) {\n        super(artifact);\n    }\n\n    async start(): Promise<this> {\n        const directory = join(this.root, this.artifact.directory);\n        const directoryExist = await exists(directory);\n        if (!(directoryExist)) await mkdirp(directory);\n\n        const response: AxiosResponse<AxiosStream> = await axios({\n            method: 'GET',\n            url: this.artifact.url,\n            responseType: 'stream',\n        });\n\n        const progress: IArtifactDownloadTaskProgress = {\n            recieved: 0,\n            total: parseInt(response.headers['content-length'], 10),\n        };\n\n        response.data.on('data', chunk => {\n            progress.recieved += chunk.length;\n            this.emit(ArtifactDownloadTaskEvent.PROGRESS, progress);\n        });\n\n        const writeStream = createWriteStream(join(this.root, this.artifact.path));\n\n        const wait = new Promise<this>((resolve) => {\n            writeStream\n                .on(ArtifactDownloadTaskEvent.ERROR, (err) => {\n                    this.emit(ArtifactDownloadTaskEvent.ERROR, err);\n                })\n                .on(ArtifactDownloadTaskEvent.FINISH, () => {\n                    this.emit(ArtifactDownloadTaskEvent.FINISH);\n                    resolve(this);\n                });\n        });\n\n        response.data.pipe(writeStream);\n\n        return wait;\n    }\n\n}\n"],"file":"artifact-download-task.js"}