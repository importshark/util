{"version":3,"sources":["../../../../../src/components/artifact/artifact-task/artifact-extract-task/artifact-extract-task.ts"],"names":["ArtifactExtractTaskEvent","ArtifactExtractTask","ArtifactTask","constructor","artifact","artifactRoot","extractionRoot","exclude","start","extractionRootExist","Promise","resolve","reject","fileOptions","autoClose","lazyEntries","filePath","path","yauzl","open","err","file","Error","progress","total","entryCount","completed","nextEntry","emit","PROGRESS","readEntry","on","entry","fileName","uncompressedSize","compressedSize","_entry","ENTRY","map","e","startsWith","includes","EXCLUDE","openReadStream","readStream","endsWith","mkdirp","sync","ERROR","writeStream","pipe","FINISH"],"mappings":"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","sourcesContent":["\nimport * as yauzl from 'yauzl';\nimport { join } from 'path';\nimport mkdirp from 'mkdirp';\nimport { createWriteStream, existsSync } from 'fs';\nimport { IArtifact } from '../../artifact';\nimport { ArtifactTask } from '../artifact-task';\nimport { exists } from '../../../util';\n\nexport interface IArtifactExtractTaskProgress {\n    total: number;\n    completed: number;\n}\n\nexport const enum ArtifactExtractTaskEvent {\n    PROGRESS = 'progress',\n    EXCLUDE = 'exclude',\n    FINISH = 'finish',\n    ENTRY = 'entry',\n    ERROR = 'error',\n}\n\nexport interface IArtifactExtractTaskEntry {\n    fileName: string;\n    uncompressedSize: number;\n    compressedSize: number;\n}\n\nexport class ArtifactExtractTask extends ArtifactTask {\n\n    constructor(\n        artifact: Partial<IArtifact>,\n        public readonly artifactRoot: string,\n        public readonly extractionRoot: string,\n        public exclude: string[] = ['META-INF/'],\n    ) {\n        super(artifact);\n    }\n\n    async start(): Promise<this> {\n        const extractionRootExist = await exists(this.extractionRoot);\n\n        if (!extractionRootExist) {\n            await mkdirp(this.extractionRoot);\n        }\n\n        return new Promise<this>((resolve, reject) => {\n            const fileOptions: yauzl.Options = { autoClose: true, lazyEntries: true };\n            const filePath = join(this.artifactRoot, this.artifact.path);\n\n            yauzl.open(filePath, fileOptions, (err, file) => {\n                if (err) {\n                    return reject(err);\n                }\n                if (!file) {\n                    return reject(new Error('cannot open zip file'));\n                }\n\n                const progress: IArtifactExtractTaskProgress = {\n                    total: file.entryCount,\n                    completed: 0,\n                };\n\n                const nextEntry = () => {\n                    progress.completed++;\n                    this.emit(ArtifactExtractTaskEvent.PROGRESS, progress);\n                    file.readEntry();\n                };\n\n                file\n                    .on('entry', (entry: yauzl.Entry) => {\n                        const {\n                            fileName,\n                            uncompressedSize,\n                            compressedSize,\n                        } = entry;\n                        const _entry: IArtifactExtractTaskEntry = {\n                            fileName,\n                            uncompressedSize,\n                            compressedSize,\n                        };\n\n                        this.emit(ArtifactExtractTaskEvent.ENTRY, _entry);\n\n                        const exclude: boolean = this.exclude\n                            .map(e => entry.fileName.startsWith(e))\n                            .includes(true);\n\n                        if (exclude) {\n                            this.emit(ArtifactExtractTaskEvent.EXCLUDE, fileName);\n                            return nextEntry();\n                        }\n\n                        file.openReadStream(entry, (err, readStream) => {\n                            if (err) {\n                                return reject(err);\n                            }\n                            if (!readStream) {\n                                return reject(new Error('cannot open read stream from zip file'));\n                            }\n\n                            const filePath = join(this.extractionRoot, fileName);\n\n                            if (fileName.endsWith('/')) {\n                                try {\n                                    mkdirp.sync(filePath);\n                                } catch (err) {\n                                    this.emit(ArtifactExtractTaskEvent.ERROR, err);\n                                }\n\n                                return nextEntry();\n                            }\n\n                            if (existsSync(filePath)) {\n                                return nextEntry();\n                            }\n\n                            const writeStream = createWriteStream(filePath);\n\n                            writeStream\n                                .on('finish', () => {\n                                    nextEntry();\n                                })\n                                .on('error', (err) => {\n                                    this.emit(ArtifactExtractTaskEvent.ERROR, err);\n                                });\n\n                            readStream.pipe(writeStream);\n                        });\n                    })\n                    .on('end', () => {\n                        this.emit(ArtifactExtractTaskEvent.FINISH);\n                        resolve(this);\n                    });\n\n                file.readEntry(); // start read entries\n            });\n        });\n    }\n\n}\n"],"file":"artifact-extract-task.js"}