{"version":3,"file":"index.esm.js","sources":["../../folder.ts","../../platform.ts","../../utils.ts","../../version.ts","../../launch.ts","../../diagnose.ts"],"sourcesContent":["import { join } from \"path\";\n\nexport interface MinecraftFolder {\n    readonly root: string;\n}\n\n/**\n * The Minecraft folder structure. All method will return the path related to a minecraft root like `.minecraft`.\n */\nexport class MinecraftFolder {\n    /**\n     * Normal a Minecraft folder from a folder or string\n     */\n    static from(location: MinecraftLocation) {\n        return typeof location === \"string\"\n            ? new MinecraftFolder(location)\n            : location instanceof MinecraftFolder\n                ? location\n                : new MinecraftFolder((location as any).root);\n    }\n\n    constructor(readonly root: string) { }\n\n    get mods(): string { return join(this.root, \"mods\"); }\n    get resourcepacks(): string { return join(this.root, \"resourcepacks\"); }\n    get assets(): string { return join(this.root, \"assets\"); }\n    get libraries(): string { return join(this.root, \"libraries\"); }\n    get versions(): string { return this.getPath(\"versions\"); }\n    get logs(): string { return this.getPath(\"logs\"); }\n    get options(): string { return this.getPath(\"options.txt\"); }\n    get launcherProfile(): string { return this.getPath(\"launcher_profiles.json\"); }\n    get lastestLog(): string { return this.getPath(\"logs\", \"latest.log\"); }\n    get maps(): string { return this.getPath(\"saves\"); }\n    get saves(): string { return this.getPath(\"saves\"); }\n    get screenshots(): string { return this.getPath(\"screenshots\"); }\n\n    getNativesRoot(version: string) { return join(this.getVersionRoot(version), version + \"-natives\"); }\n    getVersionRoot(version: string) { return join(this.versions, version); }\n    getVersionJson(version: string) { return join(this.getVersionRoot(version), version + \".json\"); }\n    getVersionJar(version: string, type?: string) { return type === \"client\" || type === undefined ? join(this.getVersionRoot(version), version + \".jar\") : join(this.getVersionRoot(version), `${version}-${type}.jar`); }\n    getVersionAll(version: string) {\n        return [\n            join(this.versions, version), join(this.versions, version, version + \".json\"),\n            join(this.versions, version, version + \".jar\")\n        ];\n    }\n    getResourcePack(fileName: string) { return join(this.resourcepacks, fileName); }\n    getMod(fileName: string) { return join(this.mods, fileName); }\n    getLog(fileName: string) { return join(this.logs, fileName); }\n    getMapInfo(map: string) { return this.getPath(\"saves\", map, \"level.dat\"); }\n    getMapIcon(map: string) { return this.getPath(\"saves\", map, \"icon.png\"); }\n    getLibraryByPath(libraryPath: string): string {\n        return join(this.libraries, libraryPath);\n    }\n    getAssetsIndex(versionAssets: string): string { return this.getPath(\"assets\", \"indexes\", versionAssets + \".json\"); }\n    getAsset(hash: string): string { return this.getPath(\"assets\", \"objects\", hash.substring(0, 2), hash); }\n    getLogConfig(file: string): string { return this.getPath(\"assets\", \"log_configs\", file); }\n    getPath(...path: string[]) {\n        return join(this.root, ...path);\n    }\n}\n\nexport namespace MinecraftPath {\n    export const mods = \"mods\";\n    export const resourcepacks = \"resourcepacks\";\n    export const assets = \"assets\";\n    export const libraries = \"libraries\";\n    export const versions = \"versions\";\n    export const logs = \"logs\";\n    export const options = \"options.txt\";\n    export const launcherProfile = \"launcher_profiles.json\"\n    export const lastestLog = \"logs/latest.log\";\n    export const maps = MinecraftPath.saves;\n    export const saves = \"saves\";\n    export const screenshots = \"screenshots\";\n\n    export function getVersionRoot(version: string) { return join(\"versions\", version); }\n    export function getNativesRoot(version: string) { return join(\"versions\", version, version + \"-natives\"); }\n    export function getVersionJson(version: string) { return join(\"versions\", version, version + \".json\"); }\n    export function getVersionJar(version: string, type?: string) {\n        return type === \"client\" || type === undefined\n            ? join(\"versions\", version, version + \".jar\")\n            : join(\"versions\", version, `${version}-${type}.jar`);\n    }\n    export function getResourcePack(fileName: string) { return join(\"resourcepacks\", fileName); }\n    export function getMod(fileName: string) { return join(\"mods\", fileName); }\n    export function getLog(fileName: string) { return join(\"logs\", fileName); }\n    export function getMapInfo(map: string) { return join(\"saves\", map, \"level.dat\"); }\n    export function getMapIcon(map: string) { return join(\"saves\", map, \"icon.png\"); }\n    export function getLibraryByPath(libraryPath: string) { return join(\"libraries\", libraryPath); }\n    export function getAssetsIndex(versionAssets: string) { return join(\"assets\", \"indexes\", versionAssets + \".json\"); }\n    export function getAsset(hash: string): string { return join(\"assets\", \"objects\", hash.substring(0, 2), hash); }\n}\n\nexport type MinecraftLocation = MinecraftFolder | string;\n","import * as os from \"os\";\n\n/**\n * The platform information related to current operating system.\n */\nexport interface Platform {\n    /**\n     * The system name of the platform. This name is majorly used for download.\n     */\n    name: \"osx\" | \"linux\" | \"windows\" | \"unknown\";\n    /**\n     * The version of the os. It should be the value of `os.release()`.\n     */\n    version: string;\n    /**\n     * The direct output of `os.arch()`. Should look like x86 or x64.\n     */\n    arch: \"x86\" | \"x64\" | string;\n}\n\n/**\n * Get Minecraft style platform info. (Majorly used to enable/disable native dependencies)\n */\nexport function getPlatform(): Platform {\n    const arch = os.arch();\n    const version = os.release();\n    switch (os.platform()) {\n        case \"darwin\":\n            return { name: \"osx\", version, arch };\n        case \"linux\":\n            return { name: \"linux\", version, arch };\n        case \"win32\":\n            return { name: \"windows\", version, arch };\n        default:\n            return { name: \"unknown\", version, arch };\n    }\n}\n","/**\n * @ignore\n */\n\nimport { createHash } from \"crypto\";\nimport {\n    createReadStream,\n    readFile as freadFile,\n    writeFile as fwriteFile,\n    access as faccess,\n    mkdir as fmkdir,\n    link as flink,\n    constants,\n} from \"fs\";\nimport { promisify } from \"util\";\nimport { pipeline as pip } from \"stream\";\n\n/** @internal */\nexport const pipeline = promisify(pip);\n/** @internal */\nexport const access = promisify(faccess);\n/** @internal */\nexport const link = promisify(flink);\n/** @internal */\nexport const readFile = promisify(freadFile);\n/** @internal */\nexport const writeFile = promisify(fwriteFile);\n/** @internal */\nexport const mkdir = promisify(fmkdir);\n\n/** @internal */\nexport function exists(file: string) {\n    return access(file, constants.F_OK).then(() => true, () => false);\n}\n/**\n * Validate the sha1 value of the file\n * @internal\n */\nexport async function validateSha1(target: string, hash?: string, strict: boolean = false) {\n    if (await access(target).then(() => false, () => true)) { return false; }\n    if (!hash) { return !strict; }\n    let sha1 = await checksum(target, \"sha1\");\n    return sha1 === hash;\n}\n/**\n * Return the sha1 of a file\n * @internal\n */\nexport async function checksum(target: string, algorithm: string) {\n    let hash = createHash(algorithm).setEncoding(\"hex\");\n    await pipeline(createReadStream(target), hash);\n    return hash.read();\n}\n/**\n * @internal\n */\nexport function isNotNull<T>(v: T | undefined): v is T {\n    return v !== undefined\n}\n\n","import { MinecraftFolder, MinecraftLocation } from \"./folder\"\nimport { Platform, getPlatform } from \"./platform\";\nimport { readFile } from \"./utils\";\nimport { extname } from \"path\";\n\ninterface PartialResolvedVersion extends Version {\n    libraries: ResolvedLibrary[];\n    arguments: {\n        game: Version.LaunchArgument[];\n        jvm: Version.LaunchArgument[];\n    };\n    minecraftDirectory: string;\n};\n/**\n * The resolved version for launcher.\n * It could be a combination of multiple versions as there might be some inheritions.\n *\n * You can get resolved version of a Minecraft by calling {@link Version.parse}.\n *\n * @see {@link Version.parse}\n */\nexport interface ResolvedVersion {\n    /**\n     * The id of the version, should be identical to the version folder.\n     */\n    id: string;\n    arguments: {\n        game: Version.LaunchArgument[];\n        jvm: Version.LaunchArgument[];\n    };\n    /**\n     * The main class full qualified name\n     */\n    mainClass: string;\n    assetIndex?: Version.AssetIndex;\n    /**\n     * The asset index id of this version. Should be something like `1.14`, `1.12`\n     */\n    assets: string;\n    downloads: {\n        client?: Version.Download;\n        server?: Version.Download;\n        [key: string]: Version.Download | undefined;\n    };\n    libraries: ResolvedLibrary[];\n\n    minimumLauncherVersion: number;\n    releaseTime: string;\n    time: string;\n    type: string;\n    logging?: {\n        [key: string]: {\n            file: Version.Download & { id: string };\n            argument: string;\n            type: string;\n        };\n    };\n    /**\n     * Recommended java version\n     */\n    javaVersion: JavaVersion\n    /**\n     * The minecraft version of this version\n     */\n    minecraftVersion: string;\n    /**\n     * The minecraft directory of this version\n     */\n    minecraftDirectory: string;\n    /**\n     * The version inheritances of this whole resolved version.\n     *\n     * The first element is this version, and the last element is the root Minecraft version.\n     * The dependencies of [<a>, <b>, <c>] should be <a> -> <b> -> <c>, where c is a Minecraft version.\n     */\n    inheritances: string[];\n\n    /**\n     * All array of json file paths.\n     *\n     * It's the chain of inherits json path. The root json will be the last element of the array.\n     * The first element is the user provided version.\n     */\n    pathChain: string[];\n}\n\n/**\n * The full library info. I can be resolved from path or maven library name.\n *\n * @see {@link LibraryInfo.resolveFromPath} {@link LibraryInfo.resolve}\n */\nexport interface LibraryInfo {\n    readonly groupId: string;\n    readonly artifactId: string;\n    readonly version: string;\n    readonly isSnapshot: boolean;\n    /**\n     * The file extension. Default is `jar`. Some files in forge are `zip`.\n     */\n    readonly type: string;\n    /**\n     * The classifier. Normally, this is empty. For forge, it can be like `universal`, `installer`.\n     */\n    readonly classifier: string;\n    /**\n     * The maven path.\n     */\n    readonly path: string;\n    /**\n     * The original maven name of this library\n     */\n    readonly name: string;\n}\n\n\nexport interface BadVersionJsonError {\n    error: \"BadVersionJson\";\n    missing: \"MainClass\" | \"AssetIndex\" | \"Downloads\";\n    version: string;\n}\nexport interface CorruptedVersionJsonError {\n    error: \"CorruptedVersionJson\";\n    version: string;\n    json: string;\n}\nexport interface MissingVersionJsonError {\n    error: \"MissingVersionJson\";\n    version: string;\n    path: string;\n}\nexport interface CircularDependenciesError {\n    error: \"CircularDependencies\";\n    /**\n     * The version has circular dependencies\n     */\n    version: string;\n\n    chain: string[];\n}\n\nexport type VersionParseError = ((BadVersionJsonError | CorruptedVersionJsonError | MissingVersionJsonError | CircularDependenciesError) & Error) | Error;\n\nexport namespace LibraryInfo {\n    /**\n     * Resolve the library info from the maven path.\n     * @param path The library path. It should look like `net/minecraftforge/forge/1.0/forge-1.0.jar`\n     */\n    export function resolveFromPath(path: string): LibraryInfo {\n        let parts = path.split(\"/\");\n        let file = parts[parts.length - 1];\n        let version = parts[parts.length - 2];\n        let artifactId = parts[parts.length - 3];\n        let groupId = parts.slice(0, parts.length - 3).join(\".\");\n\n        let filePrefix = `${artifactId}-${version}`;\n        let ext = extname(file);\n        let type = ext.substring(1);\n\n        let isSnapshot = file.startsWith(version);\n\n        let classifier = file.substring(isSnapshot ? version.length : filePrefix.length, file.length - ext.length);\n\n        if (classifier.startsWith(\"-\")) {\n            classifier = classifier.slice(1);\n        }\n\n        let name = `${groupId}:${artifactId}:${version}`;\n        if (classifier) {\n            name += `:${classifier}`;\n        }\n        if (type !== \"jar\") {\n            name += `@${type}`;\n        }\n\n        return {\n            type,\n            groupId,\n            artifactId,\n            version,\n            classifier,\n            name,\n            path,\n            isSnapshot,\n        }\n    }\n    /**\n     * Get the base info of the library from its name\n     *\n     * @param lib The name of library or the library itself\n     */\n    export function resolve(lib: string | Version.Library | ResolvedLibrary): LibraryInfo {\n        const name: string = typeof lib === \"string\" ? lib : lib.name;\n        const [body, type = \"jar\"] = name.split(\"@\");\n        const [groupId, artifactId, version, classifier = \"\"] = body.split(\":\");\n        const isSnapshot = version.endsWith(\"-SNAPSHOT\");\n\n        const groupPath = groupId.replace(/\\./g, \"/\");\n        let base = `${groupPath}/${artifactId}/${version}/${artifactId}-${version}`;\n        if (classifier) { base += `-${classifier}`; }\n        const path = `${base}.${type}`;\n\n        return {\n            type,\n            groupId,\n            artifactId,\n            version,\n            name,\n            isSnapshot,\n            classifier,\n            path,\n        };\n    }\n}\n\n/**\n * A resolved library for launcher. It can by parsed from `LibraryInfo`.\n */\nexport class ResolvedLibrary implements LibraryInfo {\n    readonly groupId: string;\n    readonly artifactId: string;\n    readonly version: string;\n    readonly isSnapshot: boolean;\n    readonly type: string;\n    readonly classifier: string;\n    readonly path: string;\n    constructor(\n        readonly name: string,\n        info: LibraryInfo,\n        readonly download: Version.Artifact,\n        readonly checksums?: string[],\n        readonly serverreq?: boolean,\n        readonly clientreq?: boolean) {\n        const { groupId, artifactId, version, isSnapshot, type, classifier, path } = info;\n        this.groupId = groupId;\n        this.artifactId = artifactId;\n        this.version = version;\n        this.isSnapshot = isSnapshot;\n        this.type = type;\n        this.classifier = classifier;\n        this.path = path;\n    }\n}\n/**\n * Represent a native libraries provided by Minecraft\n */\nexport class ResolvedNative extends ResolvedLibrary {\n    constructor(name: string,\n        info: LibraryInfo,\n        download: Version.Artifact,\n        readonly extractExclude?: string[]) {\n        super(name, info, download);\n    }\n}\nexport namespace Version {\n    export interface Download {\n        readonly sha1: string;\n        readonly size: number;\n        url: string;\n    }\n    export interface AssetIndex extends Download {\n        readonly id: string;\n        readonly totalSize: number;\n    }\n    export interface Artifact extends Download {\n        readonly path: string;\n    }\n    export interface LoggingFile extends Download {\n        readonly id: string;\n    }\n\n    export interface NormalLibrary {\n        name: string;\n        downloads: {\n            artifact: Artifact;\n        };\n    }\n    export interface Rule {\n        action: \"allow\" | \"disallow\";\n        os?: Partial<Platform>;\n        features?: { [feat: string]: boolean };\n    }\n    export interface NativeLibrary {\n        name: string;\n        downloads: {\n            artifact: Artifact;\n            classifiers: {\n                [os: string]: Artifact;\n            };\n        };\n        rules: Rule[];\n        extract: {\n            exclude: string[];\n        };\n        natives: {\n            [os: string]: string;\n        };\n    }\n\n    export interface PlatformSpecificLibrary {\n        name: string;\n        downloads: {\n            artifact: Artifact;\n        };\n        rules: Rule[];\n    }\n    export interface LegacyLibrary {\n        name: string;\n        url?: string;\n        clientreq?: boolean;\n        serverreq?: boolean;\n        checksums?: string[];\n    }\n\n    export type Library = NormalLibrary | NativeLibrary | PlatformSpecificLibrary | LegacyLibrary;\n\n    export type LaunchArgument = string | {\n        rules: Rule[];\n        value: string | string[];\n    };\n\n    /**\n      * Check if all the rules in `Rule[]` are acceptable in certain OS `platform` and features.\n      * @param rules The rules usually comes from `Library` or `LaunchArgument`\n      * @param platform The platform, leave it absent will use the `currentPlatform`\n      * @param features The features, used by game launch argument `arguments.game`\n      */\n    export function checkAllowed(rules: Rule[], platform: Platform = getPlatform(), features: string[] = []): boolean {\n        // by default it's allowed\n        if (!rules || rules.length === 0) { return true; }\n        // else it's disallow by default\n        let allow = false;\n        for (const rule of rules) {\n            const action = rule.action === \"allow\";\n            // apply by default\n            let apply = true;\n            if (\"os\" in rule && rule.os) {\n                // don't apply by default if has os rule\n                apply = false;\n                const osRule = rule.os;\n                if (platform.name === osRule.name\n                    && (!osRule.version || platform.version.match(osRule.version))) {\n                    apply = true;\n                }\n            }\n            if (apply) {\n                if (\"features\" in rule && rule.features) {\n                    const featureRequire = rule.features;\n                    // only apply when the EVERY required features enabled & not required features disabled\n                    apply = Object.entries(featureRequire)\n                        .every(([k, v]) => v ? features.indexOf(k) !== -1 : features.indexOf(k) === -1);\n                }\n            }\n            if (apply) { allow = action; }\n        }\n        return allow;\n    }\n    /**\n     * Recursively parse the version JSON.\n     *\n     * This function requires that the id in version.json is identical to the directory name of that version.\n     *\n     * e.g. .minecraft/<version-a>/<version-a.json> and in <version-a.json>:\n     *```\n     * { \"id\": \"<version-a>\", ... }\n     * ```\n     * The function might throw multiple parsing errors. You can handle them with type by this:\n     * ```ts\n     * try {\n     *   await Version.parse(mcPath, version);\n     * } catch (e) {\n     *   let err = e as VersionParseError;\n     *   switch (err.error) {\n     *     case \"BadVersionJson\": // do things...\n     *     // handle other cases\n     *     default: // this means this is not a VersionParseError, handle error normally.\n     *   }\n     * }\n     * ```\n     *\n     * @param minecraftPath The .minecraft path\n     * @param version The vesion id.\n     * @return The final resolved version detail\n     * @throws {@link CorruptedVersionJsonError}\n     * @throws {@link MissingVersionJsonError}\n     * @throws {@link BadVersionJsonError}\n     * @see {@link VersionParseError}\n     */\n    export async function parse(minecraftPath: MinecraftLocation, version: string, platofrm: Platform = getPlatform()): Promise<ResolvedVersion> {\n        const folder = MinecraftFolder.from(minecraftPath);\n        // the hierarchy is outer version to dep version\n        // e.g. [liteloader version, forge version, minecraft version]\n        const hierarchy = await resolveDependency(folder, version, platofrm);\n        return resolve(minecraftPath, hierarchy);\n    }\n\n    /**\n     * Resolve the given version hierarchy into `ResolvedVersion`.\n     *\n     * Some launcher has non-standard version json format to handle hierarchy,\n     * and if you want to handle them, you can use this function to parse.\n     *\n     * @param minecraftPath The path of the Minecraft folder\n     * @param hierarchy The version hierarchy, which can be produced by `normalizeVersionJson`\n     * @throws {@link BadVersionJsonError}\n     * @see {@link VersionParseError}\n     * @see {@link normalizeVersionJson}\n     * @see {@link parse}\n     */\n    export function resolve(minecraftPath: MinecraftLocation, hierarchy: PartialResolvedVersion[]) {\n        const folder = MinecraftFolder.from(minecraftPath);\n\n        const rootVersion = hierarchy[hierarchy.length - 1];\n        const id: string = hierarchy[0].id;\n        let assetIndex: AssetIndex = rootVersion.assetIndex!;\n        let assets: string = \"\";\n\n        const downloadsMap: { [key: string]: Download } = {};\n        const librariesMap: { [key: string]: ResolvedLibrary } = {};\n        const nativesMap: { [key: string]: ResolvedNative } = {};\n\n        let mainClass: string = \"\";\n        const args = { jvm: [] as LaunchArgument[], game: [] as LaunchArgument[] };\n        let minimumLauncherVersion: number = 0;\n        let releaseTime: string = \"\";\n        let time: string = \"\";\n        let type: string = \"\";\n        let logging: any;\n        let minecraftVersion: string = rootVersion.clientVersion ?? rootVersion.id;\n        let location: string;\n        let javaVersion: JavaVersion = { majorVersion: 8, component: \"jre-legacy\" }\n\n        const chains: string[] = hierarchy.map((j) => folder.getVersionRoot(j.id));\n        const inheritances = hierarchy.map((j) => j.id);\n\n        let json: PartialResolvedVersion;\n        do {\n            json = hierarchy.pop()!;\n            minimumLauncherVersion = Math.max(json.minimumLauncherVersion || 0, minimumLauncherVersion);\n            location = json.minecraftDirectory;\n\n            if (!Reflect.get(json, \"replace\")) {\n                args.game.push(...json.arguments.game);\n                args.jvm.push(...json.arguments.jvm);\n            } else {\n                args.game = json.arguments.game;\n                args.jvm = json.arguments.jvm;\n            }\n\n            releaseTime = json.releaseTime || releaseTime;\n            time = json.time || time;\n            logging = json.logging || logging;\n            assets = json.assets || assets;\n            type = json.type || type;\n            mainClass = json.mainClass || mainClass;\n            assetIndex = json.assetIndex || assetIndex;\n            javaVersion = json.javaVersion || javaVersion;\n            if (json.libraries) {\n                json.libraries.forEach((lib) => {\n                    let libOrgName = `${lib.groupId}:${lib.artifactId}`;\n                    if (lib.classifier) {\n                        libOrgName += `-${lib.classifier};`\n                    }\n                    if (lib instanceof ResolvedNative) {\n                        nativesMap[libOrgName] = lib;\n                    } else {\n                        librariesMap[libOrgName] = lib;\n                    }\n                });\n            }\n            if (json.downloads) {\n                for (const key in json.downloads) {\n                    downloadsMap[key] = json.downloads[key];\n                }\n            }\n        } while (hierarchy.length !== 0);\n\n        if (!mainClass) {\n            throw Object.assign(new Error(), {\n                name: \"BadVersionJson\",\n                error: \"BadVersionJson\",\n                version: id,\n                missing: \"MainClass\",\n            } as BadVersionJsonError);\n        }\n        // if (!assetIndex) {\n        //     throw Object.assign(new Error(), {\n        //         name: \"BadVersionJson\",\n        //         error: \"BadVersionJson\",\n        //         version: id,\n        //         missing: \"AssetIndex\",\n        //     } as BadVersionJsonError);\n        // }\n        // if (Object.keys(downloadsMap).length === 0) {\n        //     throw Object.assign(new Error(), {\n        //         name: \"BadVersionJson\",\n        //         error: \"BadVersionJson\",\n        //         version: id,\n        //         missing: \"Downloads\",\n        //     } as BadVersionJsonError);\n        // }\n\n        return {\n            id,\n            assetIndex,\n            assets,\n            minecraftVersion,\n            inheritances,\n            arguments: args,\n            downloads: downloadsMap,\n            libraries: Object.keys(librariesMap).map((k) => librariesMap[k]).concat(Object.keys(nativesMap).map((k) => nativesMap[k])),\n            mainClass, minimumLauncherVersion, releaseTime, time, type, logging,\n            pathChain: chains,\n            minecraftDirectory: location,\n            javaVersion,\n        } as ResolvedVersion;\n    }\n\n    /**\n     * Simply extends the version (actaully mixin)\n     *\n     * The result version will have the union of two version's libs. If one lib in two versions has different version, it will take the extra version one.\n     * It will also mixin the launchArgument if it could.\n     *\n     * This function can be used for mixin forge and liteloader version.\n     *\n     * This function will throw an Error if two version have different assets. It doesn't care about the detail version though.\n     *\n     * @beta\n     * @param id The new version id\n     * @param parent The parent version will be inherited\n     * @param version The version info which will overlap some parent information\n     * @return The raw version json could be save to the version json file\n     */\n    export function inherits(id: string, parent: Version, version: Version): Version {\n        const launcherVersion = Math.max(parent.minimumLauncherVersion, version.minimumLauncherVersion);\n\n        const libMap: { [name: string]: Library } = {};\n        parent.libraries.forEach((l) => { libMap[l.name] = l; });\n        const libraries = version.libraries.filter((l) => libMap[l.name] === undefined);\n\n        const result: Version = {\n            id,\n            time: new Date().toISOString(),\n            releaseTime: new Date().toISOString(),\n            type: version.type,\n            libraries,\n            mainClass: version.mainClass,\n            inheritsFrom: parent.id,\n            minimumLauncherVersion: launcherVersion,\n        };\n\n        if (typeof parent.minecraftArguments === \"string\") {\n            if (typeof version.arguments === \"object\") {\n                throw new TypeError(\"Extends require two version in same format!\");\n            }\n            result.minecraftArguments = mixinArgumentString(parent.minecraftArguments,\n                version.minecraftArguments || \"\");\n        } else if (typeof parent.arguments === \"object\") {\n            if (typeof version.minecraftArguments === \"string\") {\n                throw new TypeError(\"Extends require two version in same format!\");\n            }\n            result.arguments = version.arguments;\n        }\n\n        return result;\n    }\n\n    /**\n     * Mixin the string arguments\n     * @beta\n     * @param hi Higher priority argument\n     * @param lo Lower priority argument\n     */\n    export function mixinArgumentString(hi: string, lo: string): string {\n        const arrA = hi.split(\" \");\n        const arrB = lo.split(\" \");\n        const args: { [key: string]: string[] } = {};\n        for (let i = 0; i < arrA.length; i++) { // collection higher priority argument\n            const element = arrA[i];\n            if (!args[element]) { args[element] = []; }\n            if (arrA[i + 1]) { args[element].push(arrA[i += 1]); }\n        }\n        for (let i = 0; i < arrB.length; i++) { // collect lower priority argument\n            const element = arrB[i];\n            if (!args[element]) { args[element] = []; }\n            if (arrB[i + 1]) { args[element].push(arrB[i += 1]); }\n        }\n        const out: string[] = [];\n        for (const k of Object.keys(args)) {\n            switch (k) {\n                case \"--tweakClass\":\n                    const set: { [arg: string]: 0 } = {};\n                    for (const v of args[k]) { set[v] = 0; }\n                    Object.keys(set).forEach((v) => out.push(k, v));\n                    break;\n                default:\n                    if (args[k][0]) { out.push(k, args[k][0]); } // use higher priority argument in common\n                    break;\n            }\n        }\n        return out.join(\" \");\n    }\n\n    /**\n     * Resolve the dependencies of a minecraft version\n     * @param path The path of minecraft\n     * @param version The version id\n     * @returns All the version required to run this version, including this version\n     * @throws {@link CorruptedVersionJsonError}\n     * @throws {@link MissingVersionJsonError}\n     */\n    export async function resolveDependency(path: MinecraftLocation, version: string, platform: Platform = getPlatform()): Promise<PartialResolvedVersion[]> {\n        const folder = MinecraftFolder.from(path);\n        const stack: PartialResolvedVersion[] = [];\n\n        async function walk(versionName: string) {\n            let jsonPath = folder.getVersionJson(versionName);\n            let contentString: string;\n            try {\n                contentString = await readFile(jsonPath, \"utf-8\");\n            } catch (err) {\n                const e: any = err;\n                throw Object.assign(new Error(e.message), {\n                    name: \"MissingVersionJson\",\n                    error: \"MissingVersionJson\",\n                    version: versionName,\n                    path: jsonPath,\n                } as MissingVersionJsonError);\n            }\n            let nextVersion: string | undefined;\n            try {\n                let versionJson = normalizeVersionJson(contentString, folder.root, platform);\n                stack.push(versionJson);\n                nextVersion = versionJson.inheritsFrom;\n            } catch (e) {\n                if (e instanceof SyntaxError) {\n                    throw Object.assign(new Error(e.message), {\n                        name: \"CorruptedVersionJson\",\n                        error: \"CorruptedVersionJson\",\n                        version: versionName,\n                        json: contentString\n                    } as CorruptedVersionJsonError);\n                }\n                throw e;\n            }\n            if (nextVersion) {\n                if (stack.some((v) => v.id === nextVersion)) {\n                    throw Object.assign(new Error(\"Cannot resolve circular dependencies\"), {\n                        name: \"CircularDependenciesError\",\n                        error: \"CircularDependenciesError\",\n                        version,\n                        chain: stack.map((v) => v.id).concat(nextVersion)\n                    })\n                }\n                await walk(nextVersion);\n            }\n        }\n        await walk(version);\n\n        return stack;\n    }\n\n    export function resolveLibrary(lib: Library, platform: Platform = getPlatform()): ResolvedLibrary | undefined {\n        if (\"rules\" in lib && !checkAllowed(lib.rules, platform)) {\n            return undefined;\n        }\n        // official natives foramt\n        if (\"natives\" in lib) {\n            if (!lib.natives[platform.name]) { return undefined; }\n            const classifier = (lib.natives[platform.name]).replace(\"${arch}\", platform.arch.substring(1));\n            let nativeArtifact = lib.downloads?.classifiers?.[classifier];\n            const info = LibraryInfo.resolve(lib.name + \":\" + classifier);\n            if (!nativeArtifact) {\n                nativeArtifact = {\n                    path: info.path,\n                    sha1: \"\",\n                    size: -1,\n                    url: \"https://libraries.minecraft.net/\" + info.path,\n                }\n            }\n            return new ResolvedNative(lib.name + \":\" + classifier, info, nativeArtifact, lib.extract ? lib.extract.exclude ? lib.extract.exclude : undefined : undefined);\n        }\n        const info = LibraryInfo.resolve(lib.name);\n        // normal library\n        if (\"downloads\" in lib) {\n            if (!lib.downloads.artifact.url) {\n                lib.downloads.artifact.url = info.groupId === \"net.minecraftforge\"\n                    ? \"https://files.minecraftforge.net/maven/\" + lib.downloads.artifact.path\n                    : \"https://libraries.minecraft.net/\" + lib.downloads.artifact.path;\n            }\n            if (info.classifier.startsWith(\"natives\")) {\n                // new native format introduced by 1.19\n                return new ResolvedNative(info.name, info, lib.downloads.artifact);\n            }\n            return new ResolvedLibrary(lib.name, info, lib.downloads.artifact);\n        }\n        const maven = lib.url || \"https://libraries.minecraft.net/\";\n        const artifact: Artifact = {\n            size: -1,\n            sha1: lib.checksums ? lib.checksums[0] : \"\",\n            path: info.path,\n            url: maven + info.path,\n        };\n        return new ResolvedLibrary(lib.name, info, artifact, lib.checksums, lib.serverreq, lib.clientreq);\n    }\n\n    /**\n     * Resolve all these library and filter out os specific libs\n     * @param libs All raw lib\n     * @param platform The platform\n     */\n    export function resolveLibraries(libs: Library[], platform: Platform = getPlatform()): ResolvedLibrary[] {\n        return libs.map((lib) => resolveLibrary(lib, platform)).filter((l) => l !== undefined) as ResolvedLibrary[];\n    }\n\n    /**\n     * Normalize a single version json.\n     *\n     * This function will force legacy version format into new format.\n     * It will convert `minecraftArguments` into `arguments.game` and generate a default `arguments.jvm`\n     *\n     * This will pre-process the libraries according to the rules fields and current platform.\n     * Non-matched libraries will be filtered out.\n     *\n     * This will also pre-process the jvm arguments according to the platform (os) info it provided.\n     *\n     * @param versionString The version json string\n     * @param root The root of the version\n     */\n    export function normalizeVersionJson(versionString: string, root: string, platform: Platform = getPlatform()): PartialResolvedVersion {\n        function processArguments(ar: Version.LaunchArgument[]) {\n            return ar.filter((a) => {\n                // only filter out the os only rule.\n                // if the features fields presented, we don't process it now\n                if (typeof a === \"object\" && a.rules.every((r) => typeof r === \"string\" || !(\"features\" in r))) {\n                    return Version.checkAllowed(a.rules, platform);\n                }\n                return true;\n            });\n        };\n        let parsed: Version = JSON.parse(versionString);\n        // if we legacy version json don't have argument, but have minecraftArugments\n        let legacyVersionJson = !parsed.arguments;\n        let libraries = Version.resolveLibraries(parsed.libraries || [], platform);\n        let args = {\n            jvm: [] as Version.LaunchArgument[],\n            game: [] as Version.LaunchArgument[],\n        };\n        if (!parsed.arguments) { // old version\n            args.game = parsed.minecraftArguments\n                ? parsed.minecraftArguments.split(\" \")\n                : [];\n            args.jvm = [\n                {\n                    rules: [\n                        {\n                            action: \"allow\",\n                            os: {\n                                name: \"windows\",\n                            },\n                        },\n                    ],\n                    value: \"-XX:HeapDumpPath=MojangTricksIntelDriversForPerformance_javaw.exe_minecraft.exe.heapdump\",\n                },\n                {\n                    rules: [\n                        {\n                            action: \"allow\",\n                            os: {\n                                name: \"windows\",\n                                version: \"^10\\\\.\",\n                            },\n                        },\n                    ],\n                    value: [\n                        \"-Dos.name=Windows 10\",\n                        \"-Dos.version=10.0\",\n                    ],\n                },\n                \"-Djava.library.path=${natives_directory}\",\n                \"-Dminecraft.launcher.brand=${launcher_name}\",\n                \"-Dminecraft.launcher.version=${launcher_version}\",\n                \"-cp\",\n                \"${classpath}\",\n            ];\n        } else {\n            args.jvm = parsed.arguments.jvm || [];\n            args.game = parsed.arguments.game || [];\n        }\n\n        args.jvm = processArguments(args.jvm);\n        let partial = {\n            ...parsed,\n            libraries,\n            arguments: args,\n            minecraftDirectory: root,\n            // we want to replace the arguments for every version json in legacy version json\n            replace: legacyVersionJson,\n        };\n        return partial;\n    }\n}\n\nexport interface JavaVersion {\n    /**\n     * Corresponding with java manifest json.\n     * @example \"jre-legacy\"\n     */\n    component: string;\n    majorVersion: number;\n}\n\n/**\n * The raw json format provided by Minecraft. Also the namespace of version operation.\n *\n * Use `parse` to parse a Minecraft version json on the disk, and see the detail info of the version.\n *\n * With `ResolvedVersion`, you can use the resolved version to launch the game.\n *\n * @see {@link Version.parse}\n * @see {@link launch}\n */\nexport interface Version {\n    id: string;\n    time: string;\n    type: string;\n    releaseTime: string;\n    inheritsFrom?: string;\n    minimumLauncherVersion: number;\n\n    minecraftArguments?: string;\n    arguments?: {\n        game: Version.LaunchArgument[];\n        jvm: Version.LaunchArgument[];\n    };\n\n    mainClass: string;\n    libraries: Version.Library[];\n\n    jar?: string;\n\n    assetIndex?: Version.AssetIndex;\n    assets?: string;\n    downloads?: {\n        client: Version.Download;\n        server: Version.Download;\n        [key: string]: Version.Download;\n    };\n\n    client?: string;\n    server?: string;\n    logging?: {\n        [key: string]: {\n            file: Version.Download;\n            argument: string;\n            type: string;\n        },\n    };\n\n    javaVersion?: JavaVersion\n    /**\n     * NON CONVERSION! This only present in some third party launcher like PCL to mark the real minecraft version\n     */\n    clientVersion?: string\n}\n","import { open, openEntryReadStream, walkEntriesGenerator } from \"@xmcl/unzip\";\nimport { ChildProcess, SpawnOptions, spawn } from \"child_process\";\nimport { EventEmitter } from \"events\";\nimport { createWriteStream, existsSync } from \"fs\";\nimport { EOL } from \"os\";\nimport { delimiter, dirname, isAbsolute, join, resolve } from \"path\";\nimport { pipeline } from \"stream\";\nimport { promisify } from \"util\";\nimport { randomUUID } from \"crypto\"\nimport { MinecraftFolder } from \"./folder\";\nimport { getPlatform, Platform } from \"./platform\";\nimport { checksum, link, mkdir, readFile, validateSha1, writeFile } from \"./utils\";\nimport { ResolvedLibrary, ResolvedNative, ResolvedVersion, Version } from \"./version\";\n\nfunction format(template: string, args: any) {\n    return template.replace(/\\$\\{(.*?)}/g, (key) => {\n        const value = args[key.substring(2).substring(0, key.length - 3)];\n        return value ? value : key;\n    });\n}\n\nexport const DEFAULT_EXTRA_JVM_ARGS = Object.freeze([\n    \"-Xmx2G\",\n    \"-XX:+UnlockExperimentalVMOptions\",\n    \"-XX:+UseG1GC\",\n    \"-XX:G1NewSizePercent=20\",\n    \"-XX:G1ReservePercent=20\",\n    \"-XX:MaxGCPauseMillis=50\",\n    \"-XX:G1HeapRegionSize=32M\"\n]);\nexport interface EnabledFeatures {\n    [featureName: string]: object | boolean | undefined;\n    has_custom_resolution?: { resolution_width: string, resolution_height: string };\n    is_demo_user?: boolean;\n}\n\n/**\n * General launch option, used to generate launch arguments.\n * @see {@link generateArguments}\n * @see {@link launch}\n */\nexport interface LaunchOption {\n    /**\n     * User selected game profile. For game display name &\n     */\n    gameProfile?: {\n        name: string;\n        id: string;\n    };\n    accessToken?: string;\n    userType?: \"mojang\" | \"legacy\";\n    properties?: object;\n\n    launcherName?: string;\n    launcherBrand?: string;\n    /**\n     * Overwrite the version name of the current version.\n     * If this is absent, it will use version name from resolved version.\n     */\n    versionName?: string;\n    /**\n     * Overwrite the version type of the current version.\n     * If this is absent, it will use version type from resolved version.\n     *\n     * Some people use this to show fantastic message on the welcome screen.\n     */\n    versionType?: string;\n    /**\n     * The full path of launched game icon\n     * Currently, this only supported on MacOS\n     */\n    gameIcon?: string;\n    /**\n     * The launched game name\n     * Currently, this only supported on MacOS\n     */\n    gameName?: string;\n    /**\n     * The path of parent directory of saves/logs/configs/mods/resourcepacks\n     */\n    gamePath: string;\n    /**\n     * The path of parent directory of assets/libraries\n     */\n    resourcePath?: string;\n    /**\n     * The java executable file path. (Not the java home directory!)\n     */\n    javaPath: string;\n    /**\n     * Min memory, this will add a jvm flag -Xms to the command result\n     */\n    minMemory?: number;\n    /**\n     * Min memory, this will add a jvm flag -Xmx to the command result\n     */\n    maxMemory?: number;\n    /**\n     * The version of launched Minecraft. Can be either resolved version or version string\n     */\n    version: string | ResolvedVersion;\n    /**\n     * Directly launch to a server\n     */\n    server?: { ip: string, port?: number };\n    /**\n     * Resolution. This will add --height & --width or --fullscreen to the java arguments\n     */\n    resolution?: { width?: number, height?: number, fullscreen?: true };\n    /**\n     * Extra jvm options. This will append after to generated options.\n     * If this is empty, the `DEFAULT_EXTRA_JVM_ARGS` will be used.\n     */\n    extraJVMArgs?: string[];\n    /**\n     * Extra program arguments. This will append after to generated options.\n     */\n    extraMCArgs?: string[];\n    /**\n     * Assign the spawn options to the process.\n     *\n     * If you try to set `{ shell: true }`, you might want to make all argument rounded with \"\".\n     * The `launch` function will do it for you, but if you want to spawn process by yourself, remember to do that.\n     */\n    extraExecOption?: SpawnOptions;\n    isDemo?: boolean;\n\n    /**\n     * Native directory. It's .minecraft/versions/<version>/<version>-natives by default.\n     * You can replace this by your self.\n     */\n    nativeRoot?: string;\n    /**\n     * Enable features. Not really in used...\n     */\n    features?: EnabledFeatures;\n    /**\n     * Support yushi's yggdrasil agent https://github.com/to2mbn/authlib-injector/wiki\n     */\n    yggdrasilAgent?: {\n        /**\n         * The jar file path of the authlib-injector\n         */\n        jar: string;\n        /**\n         * The auth server host\n         */\n        server: string;\n        /**\n         * The prefetched base64\n         */\n        prefetched?: string;\n    };\n    /**\n     * Add `-Dfml.ignoreInvalidMinecraftCertificates=true` to jvm argument\n     */\n    ignoreInvalidMinecraftCertificates?: boolean;\n    /**\n     * Add `-Dfml.ignorePatchDiscrepancies=true` to jvm argument\n     */\n    ignorePatchDiscrepancies?: boolean;\n    /**\n     * Add extra classpaths\n     */\n    extraClassPaths?: string[];\n    /**\n     * The platform of this launch will run. By default, it will fetch the current machine info if this is absent.\n     */\n    platform?: Platform;\n\n    /**\n     * The launcher precheck functions. These will run before it run.\n     *\n     * This property is only used for `launch` function. The `generateArguments` function won't use this!\n     * @see {@link launch}\n     * @see {@link generateArguments}\n     */\n    prechecks?: LaunchPrecheck[];\n\n    /**\n     * The spawn process function. Used for spawn the java process at the end.\n     *\n     * By default, it will be the spawn function from \"child_process\" module. You can use this option to change the 3rd party spawn like [cross-spawn](https://www.npmjs.com/package/cross-spawn)\n     */\n    spawn?: (command: string, args?: ReadonlyArray<string>, options?: SpawnOptions) => ChildProcess;\n}\n\n/**\n * The function to check the game status before the game launched. Will be used in `launch` function.\n * @see {@link launch}\n */\nexport interface LaunchPrecheck {\n    (resourcePath: MinecraftFolder, version: ResolvedVersion, option: LaunchOption): Promise<void>;\n}\n\n/**\n * Thrown when the version jar is corrupted. This interface only used in `LaunchPrecheck.checkVersion`\n * @see {@link LaunchPrecheck.checkVersion}\n */\nexport interface CorruptedVersionJarError {\n    error: \"CorruptedVersionJar\";\n    version: string;\n}\n/**\n * Thrown when the libraries jar is corrupted. This interface only used in `LaunchPrecheck.checkLibraries`\n * @see {@link LaunchPrecheck.checkLibraries}\n */\nexport interface MissingLibrariesError {\n    error: \"MissingLibraries\";\n    libraries: ResolvedLibrary[];\n    version: ResolvedVersion;\n}\n\nexport namespace LaunchPrecheck {\n    /**\n     * The default launch precheck. It will check version jar, libraries and natives.\n     */\n    export const DEFAULT_PRECHECKS: readonly LaunchPrecheck[] = Object.freeze([checkVersion, checkLibraries, checkNatives, linkAssets]);\n\n    /**\n     * @deprecated\n     */\n    export const Default = LaunchPrecheck.DEFAULT_PRECHECKS;\n\n    /**\n     * Link assets to the assets/virtual/legacy.\n     */\n    export async function linkAssets(resource: MinecraftFolder, version: ResolvedVersion, option: LaunchOption) {\n        if (version.assets !== \"legacy\") {\n            return;\n        }\n        let assetsIndexPath = resource.getAssetsIndex(version.assets);\n        let buf = await readFile(assetsIndexPath);\n        let assetsIndex: { objects: Record<string, { hash: string; size: number }> } = JSON.parse(buf.toString());\n        let virtualPath = resource.getPath(\"assets/virtual/\" + version.assets);\n        await mkdir(virtualPath, { recursive: true }).catch(() => { });\n\n        let dirs = Object.keys(assetsIndex.objects)\n            .map((path) => dirname(join(virtualPath, path)))\n            .reduce((a, b) => a.add(b), new Set<string>());\n        await Promise.all([...dirs].map((dir) => mkdir(dir, { recursive: true })));\n\n        for (let [path, { hash }] of Object.entries(assetsIndex.objects)) {\n            let assetPath = resource.getAsset(hash);\n            let targetPath = join(virtualPath, path);\n            await link(assetPath, targetPath).catch((e) => {\n                if (e.code !== \"EEXIST\") { throw e; }\n            });\n        }\n    }\n\n    /**\n     * Quick check if Minecraft version jar is corrupted\n     * @throws {@link CorruptedVersionJarError}\n     */\n    export async function checkVersion(resource: MinecraftFolder, version: ResolvedVersion, option: LaunchOption) {\n        const jarPath = resource.getVersionJar(version.minecraftVersion);\n        if (version.downloads.client?.sha1) {\n            if (!await validateSha1(jarPath, version.downloads.client.sha1)) {\n                throw Object.assign(new Error(`Corrupted Version jar ${jarPath}. Either the file not reachable or the file sha1 not matched!`), {\n                    error: \"CorruptedVersionJar\",\n                    version: version.minecraftVersion,\n                } as CorruptedVersionJarError);\n            }\n        }\n    };\n    /**\n     * Quick check if there are missed libraries.\n     * @throws {@link MissingLibrariesError}\n     */\n    export async function checkLibraries(resource: MinecraftFolder, version: ResolvedVersion, option: LaunchOption) {\n        const validMask = await Promise.all(version.libraries\n            .map((lib) => validateSha1(resource.getLibraryByPath(lib.download.path), lib.download.sha1)));\n        const corruptedLibs = version.libraries.filter((_, index) => !validMask[index]);\n\n        if (corruptedLibs.length > 0) {\n            throw Object.assign(new Error(`Missing ${corruptedLibs.length} libraries! Either the file not reachable or the file sha1 not matched!`), {\n                error: \"MissingLibraries\",\n                libraries: corruptedLibs,\n                version,\n            } as MissingLibrariesError);\n        }\n    };\n    /**\n     * Ensure the native are correctly extracted in place.\n     *\n     * It will check native root located in {@link LaunchOption.nativeRoot} if it's presented.\n     * Or, it will use the `<version-id>-native` under version folder as native root to check.\n     *\n     * This will automatically extract native if there is not native extracted.\n     *\n     * @param resource The minecraft directory to extract native\n     * @param option If the native root presented here, it will use the root here.\n     */\n    export async function checkNatives(resource: MinecraftFolder, version: ResolvedVersion, option: LaunchOption) {\n        const native: string = option.nativeRoot || resource.getNativesRoot(version.id);\n        await mkdir(native, { recursive: true }).catch((e) => {\n            if (e.code !== \"EEXIST\") { throw e; }\n        });\n        const natives = version.libraries.filter((lib) => lib instanceof ResolvedNative) as ResolvedNative[];\n        const checksumFile = join(native, \".json\");\n        const includedLibs = natives.map((n) => n.name).sort();\n\n        interface ChecksumFile { entries: CheckEntry[]; libraries: string[] }\n        interface CheckEntry { file: string; sha1: string; name: string; }\n\n        const checksumFileObject: ChecksumFile = await readFile(checksumFile, \"utf-8\").then(JSON.parse).catch((e) => undefined);\n\n        let shaEntries: CheckEntry[] | undefined;\n        if (checksumFileObject && checksumFileObject.libraries) {\n            // only if the lib not change\n            // consider the case of os changed or java changed\n            if (checksumFileObject.libraries.sort().every((v, i) => v === includedLibs[i])) {\n                shaEntries = checksumFileObject.entries;\n            }\n        }\n\n        const extractedNatives: CheckEntry[] = [];\n        async function extractJar(n: ResolvedNative | undefined) {\n            if (!n) { return; }\n            const excluded: string[] = n.extractExclude || [];\n\n            const containsExcludes = (p: string) => excluded.filter((s) => p.startsWith(s)).length === 0;\n            const notInMetaInf = (p: string) => p.indexOf(\"META-INF/\") === -1;\n            const notSha1AndNotGit = (p: string) => !(p.endsWith(\".sha1\") || p.endsWith(\".git\"));\n\n            const from = resource.getLibraryByPath(n.download.path);\n            const promises: Promise<void>[] = [];\n            const zip = await open(from, { lazyEntries: true, autoClose: false });\n            for await (const entry of walkEntriesGenerator(zip)) {\n                if (containsExcludes(entry.fileName) && notInMetaInf(entry.fileName) && notSha1AndNotGit(entry.fileName)) {\n                    if (entry.fileName.endsWith(\"/\")) {\n                        continue\n                    }\n                    const dest = join(native, entry.fileName);\n                    if (entry.fileName.indexOf(\"/\") !== -1) {\n                        await mkdir(dirname(dest), {\n                            recursive: true\n                        }).catch((e) => {})\n                    }\n                    extractedNatives.push({ file: entry.fileName, name: n.name, sha1: \"\" });\n                    promises.push(promisify(pipeline)(await openEntryReadStream(zip, entry), createWriteStream(dest)));\n                }\n            }\n            await Promise.all(promises);\n        }\n        if (shaEntries) {\n            const validEntries: { [name: string]: boolean } = {};\n            for (const entry of shaEntries) {\n                if (typeof entry.file !== \"string\") { continue; }\n                const file = join(native, entry.file);\n                const valid = await validateSha1(file, entry.sha1, true);\n                if (valid) {\n                    validEntries[entry.name] = true;\n                }\n            }\n            const missingNatives = natives.filter((n) => !validEntries[n.name]);\n            if (missingNatives.length !== 0) {\n                await Promise.all(missingNatives.map(extractJar));\n            }\n        } else {\n            await Promise.all(natives.map(extractJar));\n            const entries = await Promise.all(extractedNatives.map(async (n) => ({\n                ...n,\n                sha1: await checksum(join(native, n.file), \"sha1\")\n            })));\n            const fileContent = JSON.stringify({\n                entries,\n                libraries: includedLibs,\n            });\n            await writeFile(checksumFile, fileContent);\n        }\n    }\n}\n\nexport interface BaseServerOptions {\n    /**\n     * Java executable.\n     */\n    javaPath: string;\n    /**\n     * Current working directory. Default is the same with the path.\n     */\n    cwd?: string;\n    /**\n     * No gui for the server launch\n     */\n    nogui?: boolean;\n    minMemory?: number;\n    maxMemory?: number;\n    extraJVMArgs?: string[];\n    extraMCArgs?: string[];\n    extraExecOption?: SpawnOptions;\n\n    /**\n     * The spawn process function. Used for spawn the java process at the end. By default, it will be the spawn function from \"child_process\" module. You can use this option to change the 3rd party spawn like [cross-spawn](https://www.npmjs.com/package/cross-spawn)\n     */\n    spawn?: (command: string, args?: ReadonlyArray<string>, options?: SpawnOptions) => ChildProcess;\n}\n\nexport interface MinecraftServerOptions extends BaseServerOptions {\n    /**\n     * Minecraft location.\n     */\n    path: string;\n    /**\n     * The version id.\n     */\n    version: string | ResolvedVersion;\n}\n/**\n * This is the case you provide the server jar execution path.\n */\nexport interface ServerOptions extends BaseServerOptions {\n    /**\n     * The minecraft server exectuable jar file.\n     *\n     * This is the case like you are launching forge server.\n     */\n    serverExectuableJarPath: string;\n};\n\nexport async function launchServer(options: MinecraftServerOptions | ServerOptions) {\n    const args = await generateArgumentsServer(options);\n    let cwd = options.cwd;\n    if (\"path\" in options) {\n        cwd = options.path;\n    } else {\n        cwd = dirname(options.serverExectuableJarPath);\n    }\n    const spawnOption = { cwd, env: process.env, ...(options.extraExecOption || {}) };\n    return (options.spawn ?? spawn)(args[0], args.slice(1), spawnOption);\n}\n\n/**\n * The Minecraft process watcher. You can inspect Minecraft launch state by this.\n *\n * Generally, there are several cases after you call `launch` and get `ChildProcess` object\n *\n * 1. child process fire an error, no real process start.\n * 2. child process started, but game crash (code is not 0).\n * 3. cihld process started, game normally exit (code is 0).\n */\nexport interface MinecraftProcessWatcher extends EventEmitter {\n    /**\n     * Fire when the process DOESN'T start at all, like \"java not found\".\n     *\n     * The minecraft-kill or minecraft-exit will NOT fire after this fired.\n     */\n    on(event: \"error\", listener: (error: any) => void): this;\n    /**\n     * Fire after Minecraft process exit.\n     */\n    on(event: \"minecraft-exit\", listener: (event: {\n        /**\n         * The code of the process exit. This is the nodejs child process \"exit\" event arg.\n         */\n        code: number;\n        /**\n         * The signal of the process exit. This is the nodejs child process \"exit\" event arg.\n         */\n        signal: string;\n        /**\n         * The crash report content\n         */\n        crashReport: string;\n        /**\n         * The location of the crash report\n         */\n        crashReportLocation: string;\n    }) => void): this;\n    /**\n     * Fire around the time when Minecraft window appeared in screen.\n     *\n     * Since the Minecraft window will take time to init, this event fire when it capture some keywords from stdout.\n     */\n    on(event: \"minecraft-window-ready\", listener: () => void): this;\n}\n\n/**\n * Create a process watcher for a minecraft process.\n *\n * It will watch the stdout and the error event of the process to detect error and minecraft state.\n * @param process The Minecraft process\n * @param emitter The event emitter which will emit usefule event\n */\nexport function createMinecraftProcessWatcher(process: ChildProcess, emitter: EventEmitter = new EventEmitter()): MinecraftProcessWatcher {\n    let crashReport = \"\";\n    let crashReportLocation = \"\";\n    let waitForReady = true;\n    process.on(\"error\", (e) => {\n        emitter.emit(\"error\", e);\n    });\n    process.on(\"exit\", (code, signal) => {\n        emitter.emit(\"minecraft-exit\", {\n            code,\n            signal,\n            crashReport,\n            crashReportLocation,\n        });\n    });\n    process.stdout?.on(\"data\", (s) => {\n        const string = s.toString();\n        if (string.indexOf(\"---- Minecraft Crash Report ----\") !== -1) {\n            crashReport = string;\n        } else if (string.indexOf(\"Crash report saved to:\") !== -1) {\n            crashReportLocation = string.substring(string.indexOf(\"Crash report saved to:\") + \"Crash report saved to: #@!@# \".length);\n            crashReportLocation = crashReportLocation.replace(EOL, \"\").trim();\n        } else if (waitForReady && string.indexOf(\"Reloading ResourceManager\") !== -1 || string.indexOf(\"LWJGL Version: \") !== -1 || string.indexOf(\"OpenAL initialized.\") !== -1) {\n            waitForReady = false;\n            emitter.emit(\"minecraft-window-ready\");\n        }\n    });\n    return emitter;\n}\n\n/**\n * Launch the minecraft as a child process. This function use spawn to create child process. To use an alternative way, see function generateArguments.\n *\n * By default, it will use the `LauncherPrecheck.Default` to pre-check:\n * - It will also check if the runtime libs are completed, and will extract native libs if needed.\n * - It might throw exception when the version jar is missing/checksum not matched.\n * - It might throw if the libraries/natives are missing.\n *\n * If you DON'T want such precheck, and you want to change it. You can assign the `prechecks` property in launch\n *\n * ```ts\n * launch({ ...otherOptions, prechecks: yourPrechecks });\n * ```\n *\n * @param options The detail options for this launching.\n * @see [ChildProcess](https://nodejs.org/api/child_process.html)\n * @see [spawn](https://nodejs.org/api/spawn.html)\n * @see {@link generateArguments}\n * @see {@link createMinecraftProcessWatcher}\n * @throws {@link CorruptedVersionJarError}\n * @throws {@link MissingLibrariesError}\n */\nexport async function launch(options: LaunchOption): Promise<ChildProcess> {\n    const gamePath = !isAbsolute(options.gamePath) ? resolve(options.gamePath) : options.gamePath;\n    const resourcePath = options.resourcePath || gamePath;\n    const version = typeof options.version === \"string\" ? await Version.parse(resourcePath, options.version) : options.version;\n\n    let args = await generateArguments({ ...options, version, gamePath, resourcePath });\n\n    const minecraftFolder = MinecraftFolder.from(resourcePath);\n    const prechecks = options.prechecks || LaunchPrecheck.DEFAULT_PRECHECKS;\n    await Promise.all(prechecks.map((f) => f(minecraftFolder, version, options)));\n    const spawnOption = { cwd: options.gamePath, ...(options.extraExecOption || {}) };\n\n    if (options.extraExecOption?.shell) {\n        args = args.map((a) => `\"${a}\"`);\n    }\n    // fix the ENOTFOUND if cwd does not existed.\n    if (!existsSync(gamePath)) {\n        await mkdir(gamePath);\n    }\n\n    return (options.spawn ?? spawn)(args[0], args.slice(1), spawnOption);\n}\n\n/**\n * Generate the argument for server\n */\nexport async function generateArgumentsServer(options: MinecraftServerOptions | ServerOptions) {\n    const { javaPath, minMemory = 1024, maxMemory = 1024, extraJVMArgs = [], extraMCArgs = [], extraExecOption = {} } = options;\n    const cmd = [\n        javaPath,\n        `-Xms${(minMemory)}M`,\n        `-Xmx${(maxMemory)}M`,\n        ...extraJVMArgs,\n    ];\n    if (\"path\" in options) {\n        let mc = MinecraftFolder.from(options.path);\n        let version = options.version;\n        let resolvedVersion = typeof version === \"string\" ? await Version.parse(mc, version) : version;\n        cmd.push(\"-jar\", mc.getVersionJar(resolvedVersion.minecraftVersion, \"server\"));\n    } else {\n        cmd.push(\"-jar\", options.serverExectuableJarPath);\n    }\n\n    cmd.push(...extraMCArgs);\n\n    if (options.nogui) {\n        cmd.push(\"nogui\");\n    }\n\n    return cmd;\n}\n\n/**\n * Generate the arguments array by options. This function is useful if you want to launch the process by yourself.\n *\n * This function will **NOT** check if the runtime libs are completed, and **WONT'T** check or extract native libs.\n *\n * If you want to ensure native. Please see {@link LaunchPrecheck.checkNatives}.\n *\n * @param options The launch options.\n * @throws TypeError if options does not fully fulfill the requirement\n */\nexport async function generateArguments(options: LaunchOption) {\n    if (!options.version) { throw new TypeError(\"Version cannot be null!\"); }\n    if (!options.isDemo) { options.isDemo = false; }\n\n    const currentPlatform = options.platform ?? getPlatform();\n    const gamePath = !isAbsolute(options.gamePath) ? resolve(options.gamePath) : options.gamePath;\n    const resourcePath = options.resourcePath || gamePath;\n    const version = typeof options.version === \"string\" ? await Version.parse(resourcePath, options.version) : options.version;\n    const mc = MinecraftFolder.from(resourcePath);\n    const cmd: string[] = [];\n\n    const { id = randomUUID().replace(/-/g, \"\"), name = \"Steve\" } = options.gameProfile || {};\n    const accessToken = options.accessToken || randomUUID().replace(/-/g, \"\");\n    const properties = options.properties || {};\n    const userType = options.userType || \"Mojang\";\n    const features = options.features || {};\n    const jvmArguments = normalizeArguments(version.arguments.jvm, currentPlatform, features);\n    const gameArguments = normalizeArguments(version.arguments.game, currentPlatform, features);\n    const featureValues = Object.values(features).filter((f) => typeof f === \"object\").reduce((a: any, b: any) => ({ ...a, ...b }), {});\n    const launcherName = options.launcherName || \"Launcher\";\n    const launcherBrand = options.launcherBrand || \"0.0.1\";\n    const nativeRoot = options.nativeRoot || mc.getNativesRoot(version.id);\n\n    let gameIcon = options.gameIcon;\n    if (!gameIcon) {\n        const index = mc.getAssetsIndex(version.assets);\n        const indexContent = await readFile(index, { encoding: \"utf-8\" }).then((b) => JSON.parse(b.toString()), () => ({}));\n        if (\"icons/minecraft.icns\" in indexContent) {\n            gameIcon = mc.getAsset(indexContent[\"icons/minecraft.icns\"].hash);\n        } else if (\"minecraft/icons/minecraft.icns\" in indexContent) {\n            gameIcon = mc.getAsset(indexContent[\"minecraft/icons/minecraft.icns\"].hash);\n        } else {\n            gameIcon = \"\";\n        }\n    }\n    const gameName = options.gameName || \"Minecraft\";\n\n    cmd.push(options.javaPath);\n\n    if (currentPlatform.name === \"osx\") {\n        cmd.push(`-Xdock:name=${gameName}`);\n        if (gameIcon) {\n            cmd.push(`-Xdock:icon=${gameIcon}`);\n        }\n    }\n\n    if (options.minMemory) {\n        cmd.push(`-Xms${(options.minMemory)}M`);\n    }\n    if (options.maxMemory) {\n        cmd.push(`-Xmx${(options.maxMemory)}M`);\n    }\n\n    if (options.ignoreInvalidMinecraftCertificates) {\n        cmd.push(\"-Dfml.ignoreInvalidMinecraftCertificates=true\");\n    }\n    if (options.ignorePatchDiscrepancies) {\n        cmd.push(\"-Dfml.ignorePatchDiscrepancies=true\");\n    }\n\n    if (options.yggdrasilAgent) {\n        cmd.push(`-javaagent:${options.yggdrasilAgent.jar}=${options.yggdrasilAgent.server}`);\n        cmd.push(\"-Dauthlibinjector.side=client\");\n        if (options.yggdrasilAgent.prefetched) {\n            cmd.push(`-Dauthlibinjector.yggdrasil.prefetched=${options.yggdrasilAgent.prefetched}`);\n        }\n    }\n\n    const jvmOptions = {\n        natives_directory: nativeRoot,\n        launcher_name: launcherName,\n        launcher_version: launcherBrand,\n        classpath: [\n            ...version.libraries.filter((lib) => !(lib instanceof ResolvedNative)).map((lib) => mc.getLibraryByPath(lib.download.path)),\n            mc.getVersionJar(version.minecraftVersion),\n            ...(options.extraClassPaths || []),\n        ].join(delimiter),\n        library_directory: mc.getPath(\"libraries\"),\n        classpath_separator: delimiter,\n        version_name: version.minecraftVersion,\n        ...featureValues,\n    };\n\n    if (version.logging && version.logging.client) {\n        const client = version.logging.client\n        const argument = client.argument\n        const filePath = mc.getLogConfig(client.file.id)\n        if (existsSync(filePath)) {\n            jvmArguments.push(argument.replace(\"${path}\", filePath))\n        }\n    }\n\n    cmd.push(...jvmArguments.map((arg) => format(arg, jvmOptions)));\n\n    // add extra jvm args\n    if (options.extraJVMArgs instanceof Array) {\n        if (options.extraJVMArgs.some((v) => typeof v !== \"string\")) {\n            throw new TypeError(\"Require extraJVMArgs be all string!\");\n        }\n        cmd.push(...options.extraJVMArgs);\n    } else {\n        // if options object already has `maxMemory` property, exclude the \"-Xmx2G\" option from the default extra jvm args\n        if (options.maxMemory) {\n            cmd.push(...DEFAULT_EXTRA_JVM_ARGS.filter((v) => v !== \"-Xmx2G\"));\n        } else {\n            cmd.push(...DEFAULT_EXTRA_JVM_ARGS);\n        }\n    }\n\n    cmd.push(version.mainClass);\n    const assetsDir = join(resourcePath, \"assets\");\n    const resolution = options.resolution;\n    const versionName = options.versionName || version.id;\n    const versionType = options.versionType || version.type;\n    const mcOptions = {\n        version_name: versionName,\n        version_type: versionType,\n        assets_root: assetsDir,\n        game_assets: join(assetsDir, \"virtual\", version.assets),\n        assets_index_name: version.assets,\n        game_directory: gamePath,\n        auth_player_name: name,\n        auth_uuid: id,\n        auth_access_token: accessToken,\n        user_properties: JSON.stringify(properties),\n        user_type: userType,\n        resolution_width: -1,\n        resolution_height: -1,\n        ...featureValues,\n    };\n\n    if (resolution) {\n        mcOptions.resolution_width = resolution.width;\n        mcOptions.resolution_height = resolution.height;\n    }\n\n    cmd.push(...gameArguments.map((arg) => format(arg, mcOptions)));\n\n    if (options.extraMCArgs) {\n        cmd.push(...options.extraMCArgs);\n    }\n    if (options.server) {\n        cmd.push(\"--server\", options.server.ip);\n        if (options.server.port) {\n            cmd.push(\"--port\", options.server.port.toString());\n        }\n    }\n    if (options.resolution && !cmd.find((a) => a === \"--width\")) {\n        if (options.resolution.fullscreen) {\n            cmd.push(\"--fullscreen\");\n        } else {\n            if (options.resolution.height) {\n                cmd.push(\"--height\", options.resolution.height.toString());\n            }\n            if (options.resolution.width) {\n                cmd.push(\"--width\", options.resolution.width.toString());\n            }\n        }\n    }\n    return cmd;\n}\n\n/**\n * Truely normalize the launch argument.\n */\nfunction normalizeArguments(args: Version.LaunchArgument[], platform: Platform, features: EnabledFeatures): string[] {\n    return args.map((arg) => {\n        if (typeof arg === \"string\") {\n            return arg;\n        }\n        if (!Version.checkAllowed(arg.rules, platform, Object.keys(features))) {\n            return \"\";\n        }\n        return arg.value;\n    }).reduce<string[]>((result, cur) => {\n        if (cur instanceof Array) {\n            result.push(...cur);\n        } else if (cur) {\n            result.push(cur);\n        }\n        return result;\n    }, []);\n}\n","import { ResolvedLibrary, ResolvedVersion, Version } from \"./version\";\nimport { MinecraftFolder, MinecraftLocation } from \"./folder\";\nimport { checksum, exists, isNotNull, readFile } from \"./utils\";\n\n/**\n * Represent a issue for your diagnosed minecraft client.\n */\nexport interface Issue {\n    /**\n     * The type of the issue.\n     */\n    type: \"missing\" | \"corrupted\";\n    /**\n     * The role of the file in Minecraft.\n     */\n    role: string;\n    /**\n     * The path of the problematic file.\n     */\n    file: string;\n    /**\n     * The useful hint to fix this issue. This should be a human readable string.\n     */\n    hint: string;\n    /**\n     * The expected checksum of the file. Can be an empty string if this file is missing or not check checksum at all!\n     */\n    expectedChecksum: string;\n    /**\n     * The actual checksum of the file. Can be an empty string if this file is missing or not check checksum at all!\n     */\n    receivedChecksum: string;\n}\n\nexport type MinecraftIssues = LibraryIssue | MinecraftJarIssue | VersionJsonIssue | AssetIssue | AssetIndexIssue;\n\n/**\n * The library issue represents a corrupted or missing lib.\n * You can use `Installer.installResolvedLibraries` to fix this.\n */\nexport interface LibraryIssue extends Issue {\n    role: \"library\";\n\n    /**\n     * The problematic library\n     */\n    library: ResolvedLibrary;\n}\n/**\n * The minecraft jar issue represents a corrupted or missing minecraft jar.\n * You can use `Installer.installVersion` to fix this.\n */\nexport interface MinecraftJarIssue extends Issue {\n    role: \"minecraftJar\";\n\n    /**\n     * The minecraft version for that jar\n     */\n    version: string;\n}\n/**\n * The minecraft jar issue represents a corrupted or missing version jar.\n *\n * This means your version is totally broken, and you should reinstall this version.\n *\n * - If this is just a Minecraft version, you will need to use `Installer.install` to re-install Minecraft.\n * - If this is a Forge version, you will need to use `ForgeInstaller.install` to re-install.\n * - Others are the same, just re-install\n */\nexport interface VersionJsonIssue extends Issue {\n    role: \"versionJson\";\n\n    /**\n     * The version of version json that has problem.\n     */\n    version: string;\n}\n/**\n * The asset issue represents a corrupted or missing minecraft asset file.\n * You can use `Installer.installResolvedAssets` to fix this.\n */\nexport interface AssetIssue extends Issue {\n    role: \"asset\";\n\n    /**\n     * The problematic asset\n     */\n    asset: { name: string; hash: string; size: number; };\n}\n/**\n * The asset index issue represents a corrupted or missing minecraft asset index file.\n * You can use `Installer.installAssets` to fix this.\n */\nexport interface AssetIndexIssue extends Issue {\n    role: \"assetIndex\";\n\n    /**\n     * The minecraft version of the asset index\n     */\n    version: string;\n}\n\nexport interface MinecraftIssueReport {\n    minecraftLocation: MinecraftFolder;\n    version: string;\n    issues: MinecraftIssues[];\n}\n\n/**\n * Diagnose a single file by a certain checksum algorithm. By default, this use sha1\n */\nexport async function diagnoseFile<T extends string>({ file, expectedChecksum, role, hint, algorithm }: { file: string; expectedChecksum: string; role: T; hint: string; algorithm?: string }) {\n    let issue = false;\n    let receivedChecksum = \"\";\n    algorithm = algorithm ?? \"sha1\";\n\n    const fileExisted = await exists(file);\n    if (!fileExisted) {\n        issue = true;\n    } else if (expectedChecksum !== \"\") {\n        receivedChecksum = await checksum(file, algorithm);\n        issue = receivedChecksum !== expectedChecksum;\n    }\n    const type = fileExisted ? \"corrupted\" : \"missing\" as const\n    if (issue) {\n        return {\n            type,\n            role,\n            file,\n            expectedChecksum,\n            receivedChecksum,\n            hint,\n        } as const;\n    }\n    return undefined;\n}\n\n/**\n * Diagnose the version. It will check the version json/jar, libraries and assets.\n *\n * @param version The version id string\n * @param minecraft The minecraft location\n * @beta\n */\nexport async function diagnose(version: string, minecraftLocation: MinecraftLocation): Promise<MinecraftIssueReport> {\n    const minecraft = MinecraftFolder.from(minecraftLocation);\n    let report: MinecraftIssueReport = {\n        minecraftLocation: minecraft,\n        version: version,\n        issues: [],\n    }\n    let issues: Issue[] = report.issues;\n\n    let resolvedVersion: ResolvedVersion;\n    try {\n        resolvedVersion = await Version.parse(minecraft, version);\n    } catch (err) {\n        const e: any = err;\n        if (e.error === \"CorruptedVersionJson\") {\n            issues.push({ type: \"corrupted\", role: \"versionJson\", file: minecraft.getVersionJson(e.version), expectedChecksum: \"\", receivedChecksum: \"\", hint: \"Re-install the minecraft!\" });\n        } else {\n            issues.push({ type: \"missing\", role: \"versionJson\", file: minecraft.getVersionJson(e.version), expectedChecksum: \"\", receivedChecksum: \"\", hint: \"Re-install the minecraft!\" });\n        }\n        return report;\n    }\n\n    const jarIssue = await diagnoseJar(resolvedVersion, minecraft);\n\n    if (jarIssue) {\n        report.issues.push(jarIssue);\n    }\n\n    const assetIndexIssue = await diagnoseAssetIndex(resolvedVersion, minecraft);\n\n    if (assetIndexIssue) {\n        report.issues.push(assetIndexIssue);\n    }\n\n    const librariesIssues = await diagnoseLibraries(resolvedVersion, minecraft);\n\n    if (librariesIssues.length > 0) {\n        report.issues.push(...librariesIssues);\n    }\n\n    if (!assetIndexIssue) {\n        const objects = (await readFile(minecraft.getAssetsIndex(resolvedVersion.assets), \"utf-8\").then((b) => JSON.parse(b.toString()))).objects;\n        const assetsIssues = await diagnoseAssets(objects, minecraft);\n\n        if (assetsIssues.length > 0) {\n            report.issues.push(...assetsIssues);\n        }\n    }\n\n    return report;\n}\n\n/**\n * Diagnose assets currently installed.\n * @param assetObjects The assets object metadata to check\n * @param minecraft The minecraft location\n * @returns The diagnose report\n */\nexport async function diagnoseAssets(assetObjects: Record<string, { hash: string; size: number }>, minecraft: MinecraftFolder): Promise<Array<AssetIssue>> {\n    const filenames = Object.keys(assetObjects);\n    const issues = await Promise.all(filenames.map(async (filename) => {\n        const { hash, size } = assetObjects[filename];\n        const assetPath = minecraft.getAsset(hash);\n\n        const issue = await diagnoseFile({ file: assetPath, expectedChecksum: hash, role: \"asset\", hint: \"Problem on asset! Please consider to use Installer.installAssets to fix.\" });\n        if (issue) {\n            return Object.assign(issue, { asset: { name: filename, hash, size } });\n        }\n\n        return undefined;\n    }));\n    return issues.filter(isNotNull);\n}\n\n/**\n * Diagnose all libraries presented in this resolved version.\n *\n * @param resolvedVersion The resolved version to check\n * @param minecraft The minecraft location\n * @returns List of libraries issue\n * @see {@link ResolvedVersion}\n */\nexport async function diagnoseLibraries(resolvedVersion: ResolvedVersion, minecraft: MinecraftFolder): Promise<Array<LibraryIssue>> {\n    const issues = await Promise.all(resolvedVersion.libraries.map(async (lib) => {\n        const libPath = minecraft.getLibraryByPath(lib.download.path);\n        const issue = await diagnoseFile({ file: libPath, expectedChecksum: lib.download.sha1, role: \"library\", hint: \"Problem on library! Please consider to use Installer.installLibraries to fix.\" });\n        if (issue) {\n            return Object.assign(issue, { library: lib });\n        }\n        return undefined;\n    }));\n    return issues.filter(isNotNull);\n}\n\nexport async function diagnoseAssetIndex(resolvedVersion: ResolvedVersion, minecraft: MinecraftFolder): Promise<AssetIndexIssue | undefined> {\n    const assetsIndexPath = minecraft.getAssetsIndex(resolvedVersion.assets);\n    const issue = await diagnoseFile(\n        { file: assetsIndexPath, expectedChecksum: resolvedVersion.assetIndex?.sha1 ?? \"\", role: \"assetIndex\", hint: \"Problem on assets index file! Please consider to use Installer.installAssets to fix.\" });\n    if (issue) {\n        return Object.assign(issue, { version: resolvedVersion.minecraftVersion });\n    }\n    return undefined;\n}\n\nexport async function diagnoseJar(resolvedVersion: ResolvedVersion, minecraft: MinecraftFolder): Promise<MinecraftJarIssue | undefined> {\n    const jarPath = minecraft.getVersionJar(resolvedVersion.minecraftVersion);\n    const issue = await diagnoseFile(\n        { file: jarPath, expectedChecksum: resolvedVersion.downloads.client?.sha1 ?? \"\", role: \"minecraftJar\", hint: \"Problem on Minecraft jar! Please consider to use Installer.instalVersion to fix.\" });\n    if (issue) {\n        return Object.assign(issue, { version: resolvedVersion.minecraftVersion });\n    }\n    return undefined;\n}\n"],"names":["pip","faccess","flink","freadFile","fwriteFile","fmkdir","pipeline"],"mappings":"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"}