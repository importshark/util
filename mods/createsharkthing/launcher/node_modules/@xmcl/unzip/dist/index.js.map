{"version":3,"file":"index.js","sources":["../../index.ts"],"sourcesContent":["import { Readable } from \"stream\";\nimport { Entry, fromBuffer, fromFd, open as yopen, ZipFile, ZipFileOptions, Options } from \"yauzl\";\n\nexport type OpenTarget = string | Buffer | number;\n\n/**\n * Open a yauzl zip\n * @param target The zip path or buffer or file descriptor\n * @param options The option to open\n */\nexport async function open(target: OpenTarget, options: Options = { lazyEntries: true, autoClose: false }) {\n    return new Promise<ZipFile>((resolve, reject) => {\n        function handleZip(err: Error | undefined, zipfile: ZipFile | undefined) {\n            if (err || !zipfile) {\n                reject(err ?? new Error(\"Cannot open zip!\"));\n            } else {\n                resolve(zipfile);\n            }\n        }\n        if (typeof target === \"string\") {\n            yopen(target, options, handleZip);\n        } else if (target instanceof Buffer) {\n            fromBuffer(target, options, handleZip);\n        } else {\n            fromFd(target, options, handleZip);\n        }\n    });\n}\n\n/**\n * Open the entry readstream for the zip file\n * @param zip The zip file object\n * @param entry The entry to open\n * @param options The options to open stream\n */\nexport function openEntryReadStream(zip: ZipFile, entry: Entry, options?: ZipFileOptions) {\n    return new Promise<Readable>((resolve, reject) => {\n        function handleStream(err: Error | undefined, stream: Readable | undefined) {\n            if (err || !stream) { reject(err); }\n            else { resolve(stream); }\n        }\n        if (options) { zip.openReadStream(entry, options, handleStream); }\n        else { zip.openReadStream(entry, handleStream); }\n    });\n}\n\n/**\n * Read the entry to buffer\n * @param zip The zip file object\n * @param entry The entry to open\n * @param options The options to open stream\n */\nexport async function readEntry(zip: ZipFile, entry: Entry, options?: ZipFileOptions) {\n    const stream = await openEntryReadStream(zip, entry, options);\n    const buffers: Buffer[] = [];\n    await new Promise((resolve, reject) => {\n        stream.on(\"data\", (chunk) => { buffers.push(chunk) });\n        stream.on(\"end\", resolve);\n        stream.on(\"error\", reject);\n    });\n    return Buffer.concat(buffers);\n}\n\n/**\n * Get the async entry generator for the zip file\n * @param zip The zip file\n */\nexport async function* walkEntriesGenerator(zip: ZipFile): AsyncGenerator<Entry, void, boolean | undefined> {\n    let ended = false;\n    let error: any\n    let resume: (v?: any) => void = () => { };\n    let wait = new Promise<void>((resolve) => {\n        resume = resolve\n    });\n    const entries: Entry[] = [];\n    const onEntry = (e: Entry) => {\n        entries.push(e)\n        resume();\n    };\n    const onEnd = () => {\n        ended = true;\n        resume();\n    };\n    const onError = (e: any) => {\n        error = e;\n        resume();\n    };\n\n    zip.addListener(\"entry\", onEntry)\n        .addListener(\"end\", onEnd)\n        .addListener(\"error\", onError);\n\n    try {\n        while (!ended) {\n            if (zip.lazyEntries) {\n                zip.readEntry();\n            }\n            await wait;\n            // if error, throw error\n            if (error) {\n                throw error;\n            }\n            // if entries read, yield entries\n            while (entries.length > 0 && !ended) {\n                ended = !!(yield entries.pop()!);\n            }\n            // reset wait\n            wait = new Promise<void>((resolve) => {\n                resume = resolve\n            });\n        }\n    } finally {\n        zip.removeListener(\"entry\", onEntry)\n            .removeListener(\"end\", onEnd)\n            .removeListener(\"error\", onError);\n    }\n}\n\n/**\n * Walk all the entries of the zip and once provided entries are all found, then terminate the walk process\n * @param zip The zip file\n * @param entries The entry to read\n */\nexport async function filterEntries(zip: ZipFile, entries: string[]): Promise<(Entry | undefined)[]> {\n    const remaining = new Set(entries);\n    const record: Record<string, Entry> = {};\n    for await (const entry of walkEntriesGenerator(zip)) {\n        if (remaining.size === 0) {\n            break;\n        }\n        if (remaining.has(entry.fileName)) {\n            remaining.delete(entry.fileName);\n            record[entry.fileName] = entry;\n        }\n    }\n    return entries.map((name) => record[name]);\n}\n\n/**\n * Walk all the entries of a unread zip file\n * @param zip The unread zip file\n * @param entryHandler The handler to recieve entries. Return true or Promise<true> to stop the walk\n */\nexport async function walkEntries(zip: ZipFile, entryHandler: (entry: Entry) => Promise<boolean> | boolean | void) {\n    const itr = walkEntriesGenerator(zip);\n    for await (const entry of itr) {\n        const result = await entryHandler(entry);\n        if (result) {\n            break;\n        }\n    }\n}\n\nexport function getEntriesRecord(entries: Entry[]): Record<string, Entry> {\n    const record: Record<string, Entry> = {};\n    for (const entry of entries) {\n        record[entry.fileName] = entry;\n    }\n    return record;\n}\n\n/**\n * Walk all entries of the zip file\n * @param zipFile The zip file object\n */\nexport async function readAllEntries(zipFile: ZipFile) {\n    const entries: Entry[] = [];\n    for await (const entry of walkEntriesGenerator(zipFile)) {\n        entries.push(entry);\n    }\n    return entries;\n}\n"],"names":["yopen","fromBuffer","fromFd"],"mappings":"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"}