{"version":3,"file":"index.browser.js","sources":["../util/index.browser.ts","../auth.ts","../base.ts","../mojang.ts","../service.ts"],"sourcesContent":["import { HttpRequester } from \"./base\";\n\nexport const httpRequester: HttpRequester = async (option) => {\n    const url = new URL(option.url);\n    let body: any = undefined;\n    let headers: { [key: string]: string } = option.headers;\n    if (option.body) {\n        switch (option.bodyType || \"json\") {\n            case \"json\":\n                headers[\"Content-Type\"] = \"application/json\";\n                body = JSON.stringify(option.body);\n                break;\n            case \"search\":\n                url.search = new URLSearchParams(option.body as Record<string, string>).toString();\n                break;\n            case \"formMultiPart\":\n                body = new FormData();\n                for (let [key, value] of body) {\n                    if (value instanceof Uint8Array) {\n                        value = new File([value], \"\", { type: \"image/png\" })\n                    }\n                    body.append(key, value);\n                }\n                break;\n        }\n    }\n    const response = await fetch(url.toString(), {\n        body,\n        headers,\n        method: option.method,\n    });\n    return {\n        body: await response.text(),\n        statusCode: response.status,\n        statusMessage: response.statusText,\n    };\n}\nexport async function verify(data: string, signature: string, pemKey: string | Uint8Array) {\n    function stringToBuffer(s: string) {\n        const byteArray = new Uint8Array(s.length);\n        for (let i = 0; i < s.length; i++) { byteArray[i] = s.charCodeAt(i); }\n        return byteArray;\n    }\n    const option = {\n        name: \"RSASSA-PKCS1-v1_5\",\n        hash: \"sha1\",\n    };\n    if (typeof pemKey === \"string\") {\n        pemKey = pemKey.replace(\"\\n\", \"\")\n            .replace(\"-----BEGIN PRIVATE KEY-----\", \"\")\n            .replace(\"-----END PRIVATE KEY-----\", \"\");\n        pemKey = atob(pemKey);\n        pemKey = stringToBuffer(pemKey);\n    }\n    const key = await crypto.subtle.importKey(\"pkcs8\", pemKey, option, false, [\"verify\"]);\n    return crypto.subtle.verify(option, key, stringToBuffer(signature), stringToBuffer(data));\n}\nexport function decodeBase64(b: string) {\n    return atob(b);\n}\n","import { v3, v4 } from \"uuid\";\nimport { GameProfile } from \"./base\";\nimport { httpRequester as request } from \"./util\";\n\ntype LoginWithUser = { username: string; password: string; requestUser: true }\n    | { username: string; password: string; };\ntype LoginWithoutUser = { username: string; password: string; requestUser: false }\ntype LoginOption = LoginWithUser | LoginWithoutUser\n\nconst loginPayload = (clientToken: string, option: LoginOption) => ({\n    agent: { name: \"Minecraft\", version: 1 },\n    requestUser: \"requestUser\" in option ? option.requestUser : true,\n    clientToken,\n    username: option.username,\n    password: option.password,\n})\nconst refreshPayload = (clientToken: string, option: { accessToken: string; requestUser?: boolean }) => ({\n    clientToken,\n    accessToken: option.accessToken,\n    requestUser: typeof option.requestUser === \"boolean\" ? option.requestUser : false,\n});\n\n/**\n * The auth response format.\n *\n * Please refer https://wiki.vg/Authentication\n */\nexport interface Authentication {\n    /**\n     * hexadecimal or JSON-Web-Token (unconfirmed) [The normal accessToken can be found in the payload of the JWT (second by '.' separated part as Base64 encoded JSON object), in key \"yggt\"]\n     */\n    accessToken: string;\n    /**\n     * identical to the one received\n     */\n    clientToken: string;\n    /**\n     * only present if the agent field was received\n     */\n    availableProfiles: GameProfile[];\n    /**\n     * only present if the agent field was received\n     */\n    selectedProfile: GameProfile;\n    /**\n     * only present if requestUser was true in the request payload\n     */\n    user?: {\n        id: string;\n        username: string;\n        email?: string;\n        registerIp?: string;\n        migratedFrom?: string;\n        migratedAt?: number;\n        registeredAt?: number;\n        passwordChangedAt?: number;\n        dateOfBirth?: number;\n        suspended?: boolean;\n        blocked?: boolean;\n        secured?: boolean;\n        migrated?: boolean;\n        emailVerified?: boolean;\n        legacyUser?: boolean;\n        verifiedByParent?: boolean;\n        properties?: object[];\n    };\n}\n/**\n * Random generate a new token by uuid v4. It can be client or auth token.\n * @returns a new token\n */\nexport function newToken() {\n    return v4().replace(/-/g, \"\");\n}\n\nexport interface AuthException {\n    error:\n    \"Method Not Allowed\" |\n    \"Not Not Found\" |\n    \"ForbiddenOperationException\" |\n    \"IllegalArgumentException\" |\n    \"Unsupported Media Type\";\n    errorMessage: string;\n}\n\nexport class Authenticator {\n    /**\n     * Create a client for `Yggdrasil` service, given API and clientToken.\n     * @param clientToken The client token uuid. It will generate a new one if it's absent.\n     * @param api The api for this client.\n     */\n    constructor(readonly clientToken: string, readonly api: YggdrasilAuthAPI) { }\n\n    protected post(endpoint: string, payload: object) {\n        return post(this.api.hostName + endpoint, payload);\n    }\n\n    /**\n     * Login to the server by username and password. Notice that the auth server usually have the cooldown time for login.\n     * You have to wait for about a minute after one approch of login, to login again.\n     *\n     * @param option The login options, contains the username, password\n     * @throws This may throw the error object with `statusCode`, `statusMessage`, `type` (error type), and `message`\n     */\n    login(option: LoginOption): Promise<Authentication> {\n        return this.post(this.api.authenticate,\n            loginPayload(this.clientToken, option)) as Promise<Authentication>;\n    }\n    /**\n     * Determine whether the access/client token pair is valid.\n     *\n     * @param option The access token\n     */\n    validate(option: { accessToken: string; }): Promise<boolean> {\n        return this.post(this.api.validate, {\n            clientToken: this.clientToken,\n            accessToken: option.accessToken,\n        }).then(() => true, () => false);\n    }\n    /**\n     * Invalidate an access token and client token\n     *\n     * @param option The tokens\n     */\n    invalidate(option: { accessToken: string; }): Promise<void> {\n        return this.post(this.api.invalidate, {\n            clientToken: this.clientToken,\n            accessToken: option.accessToken,\n        }).then(() => { });\n    }\n    /**\n     * Refresh the current access token with specific client token.\n     * Notice that the client token and access token must match.\n     *\n     * You can use this function to get a new token when your old token is expired.\n     *\n     * @param option The access token\n     */\n    refresh(option: { accessToken: string; requestUser?: boolean; }): Promise<Pick<Authentication, \"accessToken\" | \"clientToken\">> {\n        return this.post(this.api.refresh, refreshPayload(this.clientToken, option)) as Promise<Authentication>;\n    }\n    signout(option: { username: string; password: string; }): Promise<void> {\n        return this.post(this.api.signout, {\n            username: option.username,\n            password: option.password,\n        }).then(() => { });\n    }\n}\n\nexport interface YggdrasilAuthAPI {\n    /**\n     * The host url, like https://xxx.xxx.com\n     */\n    readonly hostName: string;\n    /**\n     * Authenticate path, in the form of `/your-endpoint`.\n     * Use to login\n     */\n    readonly authenticate: string;\n    /**\n     * Use to refresh access token\n     */\n    readonly refresh: string;\n    /**\n     * Use to validate the user access token\n     */\n    readonly validate: string;\n    /**\n     * Use to logout user (invalidate user access token)\n     */\n    readonly invalidate: string;\n    /**\n     * Use to logout user (by username and password)\n     */\n    readonly signout: string;\n}\n/**\n * The default Mojang API\n */\nexport const AUTH_API_MOJANG: YggdrasilAuthAPI = {\n    hostName: \"https://authserver.mojang.com\",\n    authenticate: \"/authenticate\",\n    refresh: \"/refresh\",\n    validate: \"/validate\",\n    invalidate: \"/invalidate\",\n    signout: \"/signout\",\n};\n\nfunction post(url: string, payload: object): Promise<object | undefined> {\n    return request({\n        url,\n        method: \"POST\",\n        body: payload,\n        headers: {},\n        bodyType: \"json\",\n    }).then(({ statusCode, body, statusMessage }) => {\n        try {\n            if (statusCode >= 200 && statusCode < 300) {\n                if (!body) { return undefined; }\n                return JSON.parse(body);\n            } else {\n                const errorBody = JSON.parse(body);\n                const err = {\n                    ...errorBody,\n                    error: typeof errorBody.error === \"string\" ? errorBody.error : \"General\",\n                    statusCode,\n                    statusMessage,\n                };\n                throw err;\n            }\n        } catch (e) {\n            if (typeof (e as any).error === \"string\") {\n                throw e;\n            }\n            throw {\n                error: \"General\",\n                statusCode,\n                statusMessage,\n                body,\n            }\n        }\n    });\n}\n\n/**\n * Login to the server by username and password. Notice that the auth server usually have the cooldown time for login.\n * You have to wait for about a minute after one approch of login, to login again.\n *\n * @param option The login options, contains the username, password and clientToken\n * @param api The API of the auth server\n * @throws This may throw the error object with `statusCode`, `statusMessage`, `type` (error type), and `message`\n */\nexport async function login(option: LoginOption & { clientToken?: string }, api: YggdrasilAuthAPI = AUTH_API_MOJANG): Promise<Authentication> {\n    return post(api.hostName + api.authenticate, loginPayload(option.clientToken || newToken(), option)) as Promise<Authentication>;\n}\n\n/**\n * Refresh the current access token with specific client token.\n * Notice that the client token and access token must match.\n *\n * You can use this function to get a new token when your old token is expired.\n *\n * @param option The tokens\n * @param api The API of the auth server\n */\nexport function refresh(option: { clientToken: string, accessToken: string, requestUser?: boolean }, api: YggdrasilAuthAPI = AUTH_API_MOJANG): Promise<Pick<Authentication, \"accessToken\" | \"clientToken\">> {\n    return post(api.hostName + api.refresh, refreshPayload(option.clientToken, option)) as Promise<Authentication>;\n}\n/**\n * Determine whether the access/client token pair is valid.\n *\n * @param option The tokens\n * @param api The API of the auth server\n */\nexport async function validate(option: { accessToken: string, clientToken?: string }, api: YggdrasilAuthAPI = AUTH_API_MOJANG): Promise<boolean> {\n    try {\n        await post(api.hostName + api.validate, {\n            accessToken: option.accessToken,\n            clientToken: option.clientToken,\n        });\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n}\n\n/**\n * Invalidate an access/client token pair\n *\n * @param option The tokens\n * @param api The API of the auth server\n */\nexport async function invalidate(option: { accessToken: string, clientToken: string }, api: YggdrasilAuthAPI = AUTH_API_MOJANG): Promise<void> {\n    await post(api.hostName + api.invalidate, {\n        accessToken: option.accessToken,\n        clientToken: option.clientToken,\n    });\n}\n/**\n * Signout user by username and password\n *\n * @param option The username and password\n * @param api The API of the auth server\n */\nexport async function signout(option: { username: string, password: string }, api: YggdrasilAuthAPI = AUTH_API_MOJANG): Promise<void> {\n    await post(api.hostName + api.signout, {\n        username: option.username,\n        password: option.password,\n    });\n}\n\n/**\n * Create an offline auth. It'll ensure the user game profile's `uuid` is the same for the same `username`.\n *\n * @param username The username you want to have in-game.\n */\nexport function offline(username: string): Authentication {\n    const prof = {\n        id: v3(username, \"00000000-0000-0000-0000-000000000000\"),\n        name: username,\n    };\n    return {\n        accessToken: newToken(),\n        clientToken: newToken(),\n        selectedProfile: prof,\n        availableProfiles: [prof],\n        user: {\n            id: v3(username, \"00000000-0000-0000-0000-000000000000\"),\n            username: username,\n        },\n    };\n}\n\n","/**\n * The game profile of the user.\n *\n * In auth response, it will usually carry the `userId`, `createdAt` properties.\n *\n * In `lookup` function, it will carry the `properties` property.\n */\nexport interface GameProfile {\n    /**\n     * game profile unique id\n     */\n    id: string;\n    /**\n     * This is in game displayed name\n     */\n    name: string;\n    properties?: { [name: string]: string };\n    userId?: string;\n    createdAt?: number;\n    legacyProfile?: boolean;\n    suspended?: boolean;\n    paid?: boolean;\n    migrated?: boolean;\n    legacy?: boolean;\n}\n\nexport interface GameProfileWithProperties extends GameProfile {\n    properties: { [name: string]: string };\n}\n\nexport namespace GameProfile {\n\n    export interface TexturesInfo {\n        /**\n         * java time in ms\n         */\n        timestamp: number;\n        /**\n         * player name\n         */\n        profileName: string;\n        /**\n         * player id\n         */\n        profileId: string;\n        textures: {\n            SKIN?: Texture,\n            CAPE?: Texture,\n            ELYTRA?: Texture,\n        };\n    }\n    /**\n     * The data structure that hold the texture\n     */\n    export interface Texture {\n        url: string;\n        metadata?: { model?: \"slim\" | \"steve\", [key: string]: any };\n    }\n\n    export namespace Texture {\n        export function isSlim(o: Texture) {\n            return o.metadata ? o.metadata.model === \"slim\" : false;\n        }\n\n        export function getModelType(o: Texture) {\n            return isSlim(o) ? \"slim\" : \"steve\";\n        }\n    }\n}\n\n/**\n * Abstract layer for http requester.\n */\nexport type HttpRequester =\n    (option: {\n        url: string;\n        method: string;\n        headers: { [key: string]: string };\n        /**\n         * Search string\n         */\n        search?: { [key: string]: string | string[] | undefined };\n        /**\n         * Either form multi part or json. Default is json.\n         */\n        bodyType?: \"formMultiPart\" | \"json\" | \"search\";\n        body?: FormItems | object | Record<string, string>;\n    }) => Promise<{\n        body: string;\n        statusMessage: string;\n        statusCode: number;\n    }>;\n\nexport type Verify = (value: string, signature: string, pemKey: string) => Promise<boolean>;\n\nexport interface ItemBlob {\n    type: string;\n    value: Uint8Array;\n}\n\nexport interface FormItems {\n    [name: string]: ItemBlob | string;\n}\n","import { httpRequester as request } from \"./util\";\n\n/**\n * Users defined question when they register this account\n *\n * The question id, content mapping is:\n *\n * 1. What is your favorite pet's name?\n * 2. What is your favorite movie?\n * 3. What is your favorite author's last name?\n * 4. What is your favorite artist's last name?\n * 5. What is your favorite actor's last name?\n * 6. What is your favorite activity?\n * 7. What is your favorite restaurant?\n * 8. What is the name of your favorite cartoon?\n * 9. What is the name of the first school you attended?\n * 10. What is the last name of your favorite teacher?\n * 11. What is your best friend's first name?\n * 12. What is your favorite cousin's name?\n * 13. What was the first name of your first girl/boyfriend?\n * 14. What was the name of your first stuffed animal?\n * 15. What is your mother's middle name?\n * 16. What is your father's middle name?\n * 17. What is your oldest sibling's middle name?\n * 18. In what city did your parents meet?\n * 19. In what hospital were you born?\n * 20. What is your favorite team?\n * 21. How old were you when you got your first computer?\n * 22. How old were you when you got your first gaming console?\n * 23. What was your first video game?\n * 24. What is your favorite card game?\n * 25. What is your favorite board game?\n * 26. What was your first gaming console?\n * 27. What was the first book you ever read?\n * 28. Where did you go on your first holiday?\n * 29. In what city does your grandmother live?\n * 30. In what city does your grandfather live?\n * 31. What is your grandmother's first name?\n * 32. What is your grandfather's first name?\n * 33. What is your least favorite food?\n * 34. What is your favorite ice cream flavor?\n * 35. What is your favorite ice cream flavor?\n * 36. What is your favorite place to visit?\n * 37. What is your dream job?\n * 38. What color was your first pet?\n * 39. What is your lucky number?s\n *\n */\nexport interface MojangChallenge {\n    readonly answer: { id: number };\n    readonly question: { id: number; question: string; };\n}\n\nexport interface MojangChallengeResponse {\n    id: number;\n    answer: string;\n}\n\n// export enum Status {\n//     GREEN, YELLOW, RED,\n// }\n// /**\n//  * Get the all mojang server statuses\n//  *\n//  * @param provider\n//  */\n// export async function getServiceStatus(): Promise<{ [server: string]: Status }> {\n//     const { body } = await request({\n//         url: \"https://status.mojang.com/check\", method: \"GET\",\n//         headers: {}\n//     });\n//     return JSON.parse(body).reduce((a: any, b: any) => Object.assign(a, b), {});\n// }\n\n/**\n * Check if user need to verify its identity. If this return false, should perform such operations:\n * 1. call `getChallenges` get all questions\n * 2. let user response questions\n * 3. call `responseChallenges` to send user responsed questions, if false, redo `2` step.\n *\n * If you don't let user response challenges when this return false. You won't be able to get/set user texture from Mojang server.\n *\n * *(This only work for Mojang account. Third party definitly doesn't have such thing)*\n * @param accessToken You user access token.\n */\nexport async function checkLocation(accessToken: string): Promise<boolean> {\n    // \"ForbiddenOperationException\";\n    // \"Current IP is not secured\";\n    const { statusCode } = await request({\n        url: \"https://api.mojang.com/user/security/location\",\n        method: \"GET\",\n        headers: { Authorization: `Bearer: ${accessToken}` },\n    });\n    return statusCode === 204;\n}\n\n/**\n * Get the user set challenge to response.\n *\n * @param accessToken The user access token\n * @returns User pre-defined questions\n */\nexport async function getChallenges(accessToken: string): Promise<MojangChallenge[]> {\n    const { body, statusCode, statusMessage } = await request({\n        url: \"https://api.mojang.com/user/security/challenges\",\n        method: \"GET\",\n        headers: { Authorization: `Bearer: ${accessToken}` },\n    });\n    if (statusCode < 200 || statusCode >= 300) {\n        throw { error: \"General\", statusCode, statusMessage };\n    }\n    const challenges = JSON.parse(body);\n    return challenges;\n}\n\n/**\n * Response the challeges from `getChallenges`.\n *\n * @param accessToken The access token\n * @param responses Your responses\n * @returns True for correctly responsed all questions\n */\nexport async function responseChallenges(accessToken: string, responses: MojangChallengeResponse[]): Promise<boolean> {\n    const { statusCode } = await request({\n        url: \"https://api.mojang.com/user/security/location\",\n        method: \"POST\",\n        body: responses,\n        bodyType: \"json\",\n        headers: { Authorization: `Bearer: ${accessToken}` },\n    });\n    return statusCode >= 200 && statusCode < 300;\n}\n","import { GameProfile, GameProfileWithProperties, FormItems } from \"./base\";\nimport { httpRequester as request, verify, decodeBase64 } from \"./util\";\n\nexport interface ProfileLookupException {\n    /**\n     * - statusCode=204 -> error=\"NoPlayerFound\"\n     * - statusCode=400 -> error=\"IllegalArgumentException\" (parsed from body)\n     * - statusCode=other -> error=statusCode.toString()\n     */\n    error: \"NoPlayerFoundException\" | \"IllegalArgumentException\" | \"GeneralException\";\n    errorMessage?: string | \"Invalid timestamp.\";\n    statusCode?: number;\n    statusMessage?: string;\n}\n\nexport interface ProfileServiceAPI {\n    /**\n     * The PEM public key\n     */\n    publicKey?: string;\n    /**\n     * Full url to query profile by uuid. Place the uuid as `${uuid}` in this url\n     */\n    profile: string;\n    /**\n     * Full url to query profile by name. Place the name as `${name}` in this url\n     */\n    profileByName: string;\n    /**\n     * Full url to set texture by profile uuid and texture type. Place uuid as `${uuid}` and type as `${type}`\n     */\n    texture: string;\n}\n\nexport namespace ProfileServiceAPI {\n    /**\n     * Replace `${uuid}` string into uuid param\n     * @param api The api\n     * @param uuid The uuid will be replaced\n     */\n    export function getProfileUrl(api: ProfileServiceAPI, uuid: string) {\n        return api.profile.replace(\"${uuid}\", uuid);\n    }\n    /**\n     * Replace `${name}` string into name param\n     * @param api The api\n     * @param name The name will be replaced\n     */\n    export function getProfileByNameUrl(api: ProfileServiceAPI, name: string) {\n        return api.profileByName.replace(\"${name}\", name);\n    }\n\n    /**\n     * Replace uuid string into `${uuid}`, and type string into `${type}`\n     * @param api The api\n     * @param uuid The uuid string\n     * @param type The type string\n     */\n    export function getTextureUrl(api: ProfileServiceAPI, uuid: string, type: string) {\n        return api.texture.replace(\"${uuid}\", uuid).replace(\"${type}\", type);\n    }\n}\n/**\n * The default Mojang API\n */\nexport const PROFILE_API_MOJANG: ProfileServiceAPI = {\n    publicKey: `-----BEGIN PUBLIC KEY-----\nMIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEAylB4B6m5lz7jwrcFz6Fd\n/fnfUhcvlxsTSn5kIK/2aGG1C3kMy4VjhwlxF6BFUSnfxhNswPjh3ZitkBxEAFY2\n5uzkJFRwHwVA9mdwjashXILtR6OqdLXXFVyUPIURLOSWqGNBtb08EN5fMnG8iFLg\nEJIBMxs9BvF3s3/FhuHyPKiVTZmXY0WY4ZyYqvoKR+XjaTRPPvBsDa4WI2u1zxXM\neHlodT3lnCzVvyOYBLXL6CJgByuOxccJ8hnXfF9yY4F0aeL080Jz/3+EBNG8RO4B\nyhtBf4Ny8NQ6stWsjfeUIvH7bU/4zCYcYOq4WrInXHqS8qruDmIl7P5XXGcabuzQ\nstPf/h2CRAUpP/PlHXcMlvewjmGU6MfDK+lifScNYwjPxRo4nKTGFZf/0aqHCh/E\nAsQyLKrOIYRE0lDG3bzBh8ogIMLAugsAfBb6M3mqCqKaTMAf/VAjh5FFJnjS+7bE\n+bZEV0qwax1CEoPPJL1fIQjOS8zj086gjpGRCtSy9+bTPTfTR/SJ+VUB5G2IeCIt\nkNHpJX2ygojFZ9n5Fnj7R9ZnOM+L8nyIjPu3aePvtcrXlyLhH/hvOfIOjPxOlqW+\nO5QwSFP4OEcyLAUgDdUgyW36Z5mB285uKW/ighzZsOTevVUG2QwDItObIV6i8RCx\nFbN2oDHyPaO5j1tTaBNyVt8CAwEAAQ==\n-----END PUBLIC KEY-----`,\n    texture: \"https://api.mojang.com/user/profile/${uuid}/${type}\",\n    profile: \"https://sessionserver.mojang.com/session/minecraft/profile/${uuid}\",\n    profileByName: \"https://api.mojang.com/users/profiles/minecraft/${name}\",\n};\n\n/**\n * Get all the textures of this GameProfile and cache them.\n *\n * @param profile The game profile from the profile service\n * @param cache Should we cache the texture into url? Default is `true`.\n */\nexport function getTextures(profile: GameProfile): GameProfile.TexturesInfo | undefined {\n    if (!profile.properties || !profile.properties.textures) { return undefined; }\n    const content: string = decodeBase64(profile.properties.textures);\n    return JSON.parse(content);\n}\n/**\n * Fetch the GameProfile by uuid.\n *\n * @param uuid The unique id of user/player\n * @param option the options for this function\n */\nexport async function lookup(uuid: string, option: { api?: ProfileServiceAPI, unsigned?: boolean } = {}) {\n    const api = option.api || PROFILE_API_MOJANG;\n    const unsigned = \"unsigned\" in option ? option.unsigned : !api.publicKey;\n    const {\n        body,\n        statusCode,\n        statusMessage,\n    } = await request({\n        url: ProfileServiceAPI.getProfileUrl(api, uuid),\n        method: \"GET\",\n        headers: {},\n        body: { unsigned },\n        bodyType: \"search\",\n    });\n    if (statusCode !== 200) {\n        throw {\n            error: \"General\",\n            statusCode,\n            statusMessage,\n        };\n    }\n    const o = JSON.parse(body);\n    if (o.properties && o.properties instanceof Array) {\n        const properties = o.properties as Array<{ name: string; value: string; signature: string; }>;\n        const to: { [key: string]: string } = {};\n        for (const prop of properties) {\n            if (prop.signature && api.publicKey && !await verify(prop.value, prop.signature, api.publicKey)) {\n                console.warn(`Discard corrupted prop ${prop.name}: ${prop.value} as the signature mismatched!`);\n            } else {\n                to[prop.name] = prop.value;\n            }\n        }\n        o.properties = to;\n    }\n    return o as GameProfileWithProperties;\n}\n/**\n * Look up the GameProfile by username in game.\n * This will return the UUID of the name at the timestamp provided.\n * `?at=0` can be used to get the UUID of the original user of that username, but, it only works if the name was changed at least once, or if the account is legacy.\n\n * The timestamp is a UNIX timestamp (without milliseconds)\n * When the at parameter is not sent, the current time is used\n * @param name The username in game.\n * @param option the options of this function\n * @throws ProfileLookupException\n */\nexport function lookupByName(name: string, option: { api?: ProfileServiceAPI, timestamp?: number } = {}) {\n    const api = option.api || PROFILE_API_MOJANG;\n    const time: number = option.timestamp || 0;\n    let target = ProfileServiceAPI.getProfileByNameUrl(api, name);\n    let form;\n    if (time) {\n        form = { at: (time / 1000) };\n    }\n    return request({\n        url: target,\n        method: \"GET\",\n        headers: {},\n        body: form,\n        bodyType: \"search\",\n    }).then(({ statusCode, statusMessage, body }) => {\n        if (statusCode === 200) {\n            return JSON.parse(body) as GameProfile;\n        } else if (statusCode === 204) {\n            throw {\n                error: \"NoPlayerFoundException\",\n                errorMessage: \"\",\n                statusCode,\n                statusMessage\n            } as ProfileLookupException;\n        } else {\n            let errorBody;\n            try {\n                errorBody = JSON.parse(body);\n            } catch {\n                errorBody = {};\n            }\n            throw {\n                error: errorBody.error || \"General\",\n                errorMessage: errorBody.errorMessage,\n                statusCode,\n                statusMessage\n            } as ProfileLookupException;\n        }\n    });\n}\n\nexport interface SetTextureOption {\n    accessToken: string,\n    uuid: string,\n    type: \"skin\" | \"cape\" | \"elytra\",\n    texture?: {\n        url: string;\n        metadata?: { model?: \"slim\" | \"steve\", [key: string]: any };\n    } | {\n        data: Uint8Array;\n        metadata?: { model?: \"slim\" | \"steve\", [key: string]: any };\n    },\n}\n\n/**\n * Set texture by access token and uuid.\n * If the texture is undefined, it will clear the texture to default steve.\n */\nexport async function setTexture(option: SetTextureOption, api: ProfileServiceAPI = PROFILE_API_MOJANG): Promise<void> {\n    const urlString = ProfileServiceAPI.getTextureUrl(api, option.uuid, option.type);\n    const headers = {\n        Authorization: `Bearer: ${option.accessToken}`\n    };\n    if (!option.texture) {\n        // delete texture\n        const response = await request({\n            url: urlString,\n            method: \"DELETE\",\n            headers,\n        });\n        if (response.statusCode >= 300) {\n            throw new Error(`Status code ${response.statusCode}!`)\n        }\n    } else if (\"data\" in option.texture) {\n        // upload texture\n        const response = await request({\n            url: urlString,\n            method: \"PUT\",\n            body: {\n                model: option.texture.metadata?.model || \"\",\n                file: { type: \"image/png\", value: option.texture.data },\n            } as FormItems,\n            bodyType: \"formMultiPart\",\n            headers,\n        });\n        if (response.statusCode >= 300) {\n            throw new Error(`Status code ${response.statusCode}!`)\n        }\n    } else if (\"url\" in option.texture) {\n        // set texture\n        const response = await request({\n            url: urlString,\n            method: \"POST\",\n            body: {\n                model: option.texture.metadata?.model || \"\",\n                url: option.texture.url,\n            },\n            bodyType: \"search\",\n            headers,\n        });\n        if (response.statusCode >= 300) {\n            throw new Error(`Status code ${response.statusCode}!`)\n        }\n    } else {\n        throw new Error(\"Illegal Option Format!\");\n    }\n}\n\n/**\n * A lookuper will maintain your last time of lookup. It will prevent the lookup frequency exceed the rate limit\n */\nexport class ProfileLookuper {\n    protected lookupRecord: Record<string, {\n        lastLookupTime: number;\n        deferredLookup: Promise<any> | undefined;\n    }> = {};\n\n    constructor(\n        readonly api: ProfileServiceAPI,\n        /**\n         * The rate limit of this lookuper\n         */\n        readonly rateLimit: number = 6000) { }\n\n    lookup(uuid: string): Promise<GameProfileWithProperties> {\n        const now = Date.now();\n        const api = this.api;\n        const rateLimit = this.rateLimit;\n\n        const lastLookup = this.lookupRecord[uuid];\n\n        if (!lastLookup) {\n            // never lookup\n            this.lookupRecord[uuid] = {\n                deferredLookup: undefined,\n                lastLookupTime: Date.now(),\n            }\n            return lookup(uuid, { api });\n        }\n\n        let lastLookupTime = lastLookup.lastLookupTime;\n        let deferredLookup = lastLookup.deferredLookup;\n\n        if (now - lastLookupTime < rateLimit) {\n            // lookup too freq\n            if (!deferredLookup) {\n                // no one looked\n                deferredLookup = new Promise((resolve) => {\n                    setTimeout(() => {\n                        this.lookupRecord[uuid] = {\n                            deferredLookup: undefined,\n                            lastLookupTime: Date.now(),\n                        };\n                        resolve(lookup(uuid, { api }));\n                    }, (now - lastLookupTime - rateLimit));\n                });\n            }\n            lastLookup.deferredLookup = deferredLookup;\n            return deferredLookup;\n        }\n\n        // not too freq, update the look up time\n        lastLookup.lastLookupTime = Date.now();\n        return lookup(uuid, { api });\n    }\n}\n"],"names":["request"],"mappings":"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"}